// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as certificateauthorityserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1beta1.CertificateAuthorityServiceClient', () => {
    it('has servicePath', () => {
        const servicePath = certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        assert.strictEqual(client.certificateAuthorityServiceStub, undefined);
        await client.initialize();
        assert(client.certificateAuthorityServiceStub);
    });

    it('has close method', () => {
        const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('createCertificate', () => {
        it('invokes createCertificate without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CreateCertificateRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.Certificate());
            client.innerApiCalls.createCertificate = stubSimpleCall(expectedResponse);
            const [response] = await client.createCertificate(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createCertificate as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createCertificate without error using callback', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CreateCertificateRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.Certificate());
            client.innerApiCalls.createCertificate = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createCertificate(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.security.privateca.v1beta1.ICertificate|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createCertificate as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createCertificate with error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CreateCertificateRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createCertificate = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createCertificate(request), expectedError);
            assert((client.innerApiCalls.createCertificate as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getCertificate', () => {
        it('invokes getCertificate without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.GetCertificateRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.Certificate());
            client.innerApiCalls.getCertificate = stubSimpleCall(expectedResponse);
            const [response] = await client.getCertificate(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getCertificate as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getCertificate without error using callback', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.GetCertificateRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.Certificate());
            client.innerApiCalls.getCertificate = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getCertificate(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.security.privateca.v1beta1.ICertificate|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getCertificate as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getCertificate with error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.GetCertificateRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getCertificate = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getCertificate(request), expectedError);
            assert((client.innerApiCalls.getCertificate as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('revokeCertificate', () => {
        it('invokes revokeCertificate without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.RevokeCertificateRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.Certificate());
            client.innerApiCalls.revokeCertificate = stubSimpleCall(expectedResponse);
            const [response] = await client.revokeCertificate(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.revokeCertificate as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes revokeCertificate without error using callback', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.RevokeCertificateRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.Certificate());
            client.innerApiCalls.revokeCertificate = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.revokeCertificate(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.security.privateca.v1beta1.ICertificate|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.revokeCertificate as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes revokeCertificate with error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.RevokeCertificateRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.revokeCertificate = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.revokeCertificate(request), expectedError);
            assert((client.innerApiCalls.revokeCertificate as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateCertificate', () => {
        it('invokes updateCertificate without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.UpdateCertificateRequest());
            request.certificate = {};
            request.certificate.name = '';
            const expectedHeaderRequestParams = "certificate.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.Certificate());
            client.innerApiCalls.updateCertificate = stubSimpleCall(expectedResponse);
            const [response] = await client.updateCertificate(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateCertificate as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateCertificate without error using callback', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.UpdateCertificateRequest());
            request.certificate = {};
            request.certificate.name = '';
            const expectedHeaderRequestParams = "certificate.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.Certificate());
            client.innerApiCalls.updateCertificate = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateCertificate(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.security.privateca.v1beta1.ICertificate|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateCertificate as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateCertificate with error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.UpdateCertificateRequest());
            request.certificate = {};
            request.certificate.name = '';
            const expectedHeaderRequestParams = "certificate.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateCertificate = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateCertificate(request), expectedError);
            assert((client.innerApiCalls.updateCertificate as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('fetchCertificateAuthorityCsr', () => {
        it('invokes fetchCertificateAuthorityCsr without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.FetchCertificateAuthorityCsrRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.FetchCertificateAuthorityCsrResponse());
            client.innerApiCalls.fetchCertificateAuthorityCsr = stubSimpleCall(expectedResponse);
            const [response] = await client.fetchCertificateAuthorityCsr(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.fetchCertificateAuthorityCsr as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes fetchCertificateAuthorityCsr without error using callback', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.FetchCertificateAuthorityCsrRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.FetchCertificateAuthorityCsrResponse());
            client.innerApiCalls.fetchCertificateAuthorityCsr = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.fetchCertificateAuthorityCsr(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.security.privateca.v1beta1.IFetchCertificateAuthorityCsrResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.fetchCertificateAuthorityCsr as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes fetchCertificateAuthorityCsr with error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.FetchCertificateAuthorityCsrRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.fetchCertificateAuthorityCsr = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.fetchCertificateAuthorityCsr(request), expectedError);
            assert((client.innerApiCalls.fetchCertificateAuthorityCsr as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getCertificateAuthority', () => {
        it('invokes getCertificateAuthority without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.GetCertificateAuthorityRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CertificateAuthority());
            client.innerApiCalls.getCertificateAuthority = stubSimpleCall(expectedResponse);
            const [response] = await client.getCertificateAuthority(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getCertificateAuthority as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getCertificateAuthority without error using callback', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.GetCertificateAuthorityRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CertificateAuthority());
            client.innerApiCalls.getCertificateAuthority = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getCertificateAuthority(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getCertificateAuthority as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getCertificateAuthority with error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.GetCertificateAuthorityRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getCertificateAuthority = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getCertificateAuthority(request), expectedError);
            assert((client.innerApiCalls.getCertificateAuthority as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getCertificateRevocationList', () => {
        it('invokes getCertificateRevocationList without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.GetCertificateRevocationListRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CertificateRevocationList());
            client.innerApiCalls.getCertificateRevocationList = stubSimpleCall(expectedResponse);
            const [response] = await client.getCertificateRevocationList(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getCertificateRevocationList as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getCertificateRevocationList without error using callback', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.GetCertificateRevocationListRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CertificateRevocationList());
            client.innerApiCalls.getCertificateRevocationList = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getCertificateRevocationList(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getCertificateRevocationList as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getCertificateRevocationList with error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.GetCertificateRevocationListRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getCertificateRevocationList = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getCertificateRevocationList(request), expectedError);
            assert((client.innerApiCalls.getCertificateRevocationList as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getReusableConfig', () => {
        it('invokes getReusableConfig without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.GetReusableConfigRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ReusableConfig());
            client.innerApiCalls.getReusableConfig = stubSimpleCall(expectedResponse);
            const [response] = await client.getReusableConfig(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getReusableConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getReusableConfig without error using callback', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.GetReusableConfigRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ReusableConfig());
            client.innerApiCalls.getReusableConfig = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getReusableConfig(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.security.privateca.v1beta1.IReusableConfig|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getReusableConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getReusableConfig with error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.GetReusableConfigRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getReusableConfig = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getReusableConfig(request), expectedError);
            assert((client.innerApiCalls.getReusableConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('activateCertificateAuthority', () => {
        it('invokes activateCertificateAuthority without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ActivateCertificateAuthorityRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.activateCertificateAuthority = stubLongRunningCall(expectedResponse);
            const [operation] = await client.activateCertificateAuthority(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.activateCertificateAuthority as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes activateCertificateAuthority without error using callback', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ActivateCertificateAuthorityRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.activateCertificateAuthority = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.activateCertificateAuthority(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority, protos.google.cloud.security.privateca.v1beta1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority, protos.google.cloud.security.privateca.v1beta1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.activateCertificateAuthority as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes activateCertificateAuthority with call error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ActivateCertificateAuthorityRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.activateCertificateAuthority = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.activateCertificateAuthority(request), expectedError);
            assert((client.innerApiCalls.activateCertificateAuthority as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes activateCertificateAuthority with LRO error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ActivateCertificateAuthorityRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.activateCertificateAuthority = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.activateCertificateAuthority(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.activateCertificateAuthority as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkActivateCertificateAuthorityProgress without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkActivateCertificateAuthorityProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkActivateCertificateAuthorityProgress with error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkActivateCertificateAuthorityProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createCertificateAuthority', () => {
        it('invokes createCertificateAuthority without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CreateCertificateAuthorityRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createCertificateAuthority = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createCertificateAuthority(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createCertificateAuthority as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createCertificateAuthority without error using callback', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CreateCertificateAuthorityRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createCertificateAuthority = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createCertificateAuthority(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority, protos.google.cloud.security.privateca.v1beta1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority, protos.google.cloud.security.privateca.v1beta1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createCertificateAuthority as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createCertificateAuthority with call error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CreateCertificateAuthorityRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createCertificateAuthority = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createCertificateAuthority(request), expectedError);
            assert((client.innerApiCalls.createCertificateAuthority as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createCertificateAuthority with LRO error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CreateCertificateAuthorityRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createCertificateAuthority = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createCertificateAuthority(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.createCertificateAuthority as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkCreateCertificateAuthorityProgress without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateCertificateAuthorityProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateCertificateAuthorityProgress with error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateCertificateAuthorityProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('disableCertificateAuthority', () => {
        it('invokes disableCertificateAuthority without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.DisableCertificateAuthorityRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.disableCertificateAuthority = stubLongRunningCall(expectedResponse);
            const [operation] = await client.disableCertificateAuthority(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.disableCertificateAuthority as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes disableCertificateAuthority without error using callback', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.DisableCertificateAuthorityRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.disableCertificateAuthority = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.disableCertificateAuthority(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority, protos.google.cloud.security.privateca.v1beta1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority, protos.google.cloud.security.privateca.v1beta1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.disableCertificateAuthority as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes disableCertificateAuthority with call error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.DisableCertificateAuthorityRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.disableCertificateAuthority = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.disableCertificateAuthority(request), expectedError);
            assert((client.innerApiCalls.disableCertificateAuthority as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes disableCertificateAuthority with LRO error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.DisableCertificateAuthorityRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.disableCertificateAuthority = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.disableCertificateAuthority(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.disableCertificateAuthority as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkDisableCertificateAuthorityProgress without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDisableCertificateAuthorityProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDisableCertificateAuthorityProgress with error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDisableCertificateAuthorityProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('enableCertificateAuthority', () => {
        it('invokes enableCertificateAuthority without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.EnableCertificateAuthorityRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.enableCertificateAuthority = stubLongRunningCall(expectedResponse);
            const [operation] = await client.enableCertificateAuthority(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.enableCertificateAuthority as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes enableCertificateAuthority without error using callback', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.EnableCertificateAuthorityRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.enableCertificateAuthority = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.enableCertificateAuthority(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority, protos.google.cloud.security.privateca.v1beta1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority, protos.google.cloud.security.privateca.v1beta1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.enableCertificateAuthority as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes enableCertificateAuthority with call error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.EnableCertificateAuthorityRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.enableCertificateAuthority = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.enableCertificateAuthority(request), expectedError);
            assert((client.innerApiCalls.enableCertificateAuthority as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes enableCertificateAuthority with LRO error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.EnableCertificateAuthorityRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.enableCertificateAuthority = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.enableCertificateAuthority(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.enableCertificateAuthority as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkEnableCertificateAuthorityProgress without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkEnableCertificateAuthorityProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkEnableCertificateAuthorityProgress with error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkEnableCertificateAuthorityProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('restoreCertificateAuthority', () => {
        it('invokes restoreCertificateAuthority without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.RestoreCertificateAuthorityRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.restoreCertificateAuthority = stubLongRunningCall(expectedResponse);
            const [operation] = await client.restoreCertificateAuthority(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.restoreCertificateAuthority as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes restoreCertificateAuthority without error using callback', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.RestoreCertificateAuthorityRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.restoreCertificateAuthority = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.restoreCertificateAuthority(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority, protos.google.cloud.security.privateca.v1beta1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority, protos.google.cloud.security.privateca.v1beta1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.restoreCertificateAuthority as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes restoreCertificateAuthority with call error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.RestoreCertificateAuthorityRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.restoreCertificateAuthority = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.restoreCertificateAuthority(request), expectedError);
            assert((client.innerApiCalls.restoreCertificateAuthority as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes restoreCertificateAuthority with LRO error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.RestoreCertificateAuthorityRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.restoreCertificateAuthority = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.restoreCertificateAuthority(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.restoreCertificateAuthority as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkRestoreCertificateAuthorityProgress without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkRestoreCertificateAuthorityProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkRestoreCertificateAuthorityProgress with error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkRestoreCertificateAuthorityProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('scheduleDeleteCertificateAuthority', () => {
        it('invokes scheduleDeleteCertificateAuthority without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ScheduleDeleteCertificateAuthorityRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.scheduleDeleteCertificateAuthority = stubLongRunningCall(expectedResponse);
            const [operation] = await client.scheduleDeleteCertificateAuthority(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.scheduleDeleteCertificateAuthority as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes scheduleDeleteCertificateAuthority without error using callback', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ScheduleDeleteCertificateAuthorityRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.scheduleDeleteCertificateAuthority = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.scheduleDeleteCertificateAuthority(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority, protos.google.cloud.security.privateca.v1beta1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority, protos.google.cloud.security.privateca.v1beta1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.scheduleDeleteCertificateAuthority as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes scheduleDeleteCertificateAuthority with call error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ScheduleDeleteCertificateAuthorityRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.scheduleDeleteCertificateAuthority = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.scheduleDeleteCertificateAuthority(request), expectedError);
            assert((client.innerApiCalls.scheduleDeleteCertificateAuthority as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes scheduleDeleteCertificateAuthority with LRO error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ScheduleDeleteCertificateAuthorityRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.scheduleDeleteCertificateAuthority = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.scheduleDeleteCertificateAuthority(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.scheduleDeleteCertificateAuthority as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkScheduleDeleteCertificateAuthorityProgress without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkScheduleDeleteCertificateAuthorityProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkScheduleDeleteCertificateAuthorityProgress with error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkScheduleDeleteCertificateAuthorityProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateCertificateAuthority', () => {
        it('invokes updateCertificateAuthority without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.UpdateCertificateAuthorityRequest());
            request.certificateAuthority = {};
            request.certificateAuthority.name = '';
            const expectedHeaderRequestParams = "certificate_authority.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateCertificateAuthority = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateCertificateAuthority(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateCertificateAuthority as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateCertificateAuthority without error using callback', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.UpdateCertificateAuthorityRequest());
            request.certificateAuthority = {};
            request.certificateAuthority.name = '';
            const expectedHeaderRequestParams = "certificate_authority.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateCertificateAuthority = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateCertificateAuthority(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority, protos.google.cloud.security.privateca.v1beta1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority, protos.google.cloud.security.privateca.v1beta1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateCertificateAuthority as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateCertificateAuthority with call error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.UpdateCertificateAuthorityRequest());
            request.certificateAuthority = {};
            request.certificateAuthority.name = '';
            const expectedHeaderRequestParams = "certificate_authority.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateCertificateAuthority = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateCertificateAuthority(request), expectedError);
            assert((client.innerApiCalls.updateCertificateAuthority as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateCertificateAuthority with LRO error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.UpdateCertificateAuthorityRequest());
            request.certificateAuthority = {};
            request.certificateAuthority.name = '';
            const expectedHeaderRequestParams = "certificate_authority.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateCertificateAuthority = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateCertificateAuthority(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.updateCertificateAuthority as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkUpdateCertificateAuthorityProgress without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateCertificateAuthorityProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateCertificateAuthorityProgress with error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateCertificateAuthorityProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateCertificateRevocationList', () => {
        it('invokes updateCertificateRevocationList without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.UpdateCertificateRevocationListRequest());
            request.certificateRevocationList = {};
            request.certificateRevocationList.name = '';
            const expectedHeaderRequestParams = "certificate_revocation_list.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateCertificateRevocationList = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateCertificateRevocationList(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateCertificateRevocationList as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateCertificateRevocationList without error using callback', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.UpdateCertificateRevocationListRequest());
            request.certificateRevocationList = {};
            request.certificateRevocationList.name = '';
            const expectedHeaderRequestParams = "certificate_revocation_list.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateCertificateRevocationList = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateCertificateRevocationList(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList, protos.google.cloud.security.privateca.v1beta1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList, protos.google.cloud.security.privateca.v1beta1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateCertificateRevocationList as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateCertificateRevocationList with call error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.UpdateCertificateRevocationListRequest());
            request.certificateRevocationList = {};
            request.certificateRevocationList.name = '';
            const expectedHeaderRequestParams = "certificate_revocation_list.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateCertificateRevocationList = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateCertificateRevocationList(request), expectedError);
            assert((client.innerApiCalls.updateCertificateRevocationList as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateCertificateRevocationList with LRO error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.UpdateCertificateRevocationListRequest());
            request.certificateRevocationList = {};
            request.certificateRevocationList.name = '';
            const expectedHeaderRequestParams = "certificate_revocation_list.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateCertificateRevocationList = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateCertificateRevocationList(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.updateCertificateRevocationList as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkUpdateCertificateRevocationListProgress without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateCertificateRevocationListProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateCertificateRevocationListProgress with error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateCertificateRevocationListProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('listCertificates', () => {
        it('invokes listCertificates without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ListCertificatesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.Certificate()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.Certificate()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.Certificate()),
            ];
            client.innerApiCalls.listCertificates = stubSimpleCall(expectedResponse);
            const [response] = await client.listCertificates(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listCertificates as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listCertificates without error using callback', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ListCertificatesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.Certificate()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.Certificate()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.Certificate()),
            ];
            client.innerApiCalls.listCertificates = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listCertificates(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.security.privateca.v1beta1.ICertificate[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listCertificates as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listCertificates with error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ListCertificatesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listCertificates = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listCertificates(request), expectedError);
            assert((client.innerApiCalls.listCertificates as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listCertificatesStream without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ListCertificatesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.Certificate()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.Certificate()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.Certificate()),
            ];
            client.descriptors.page.listCertificates.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listCertificatesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.security.privateca.v1beta1.Certificate[] = [];
                stream.on('data', (response: protos.google.cloud.security.privateca.v1beta1.Certificate) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listCertificates.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listCertificates, request));
            assert.strictEqual(
                (client.descriptors.page.listCertificates.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listCertificatesStream with error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ListCertificatesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listCertificates.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listCertificatesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.security.privateca.v1beta1.Certificate[] = [];
                stream.on('data', (response: protos.google.cloud.security.privateca.v1beta1.Certificate) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listCertificates.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listCertificates, request));
            assert.strictEqual(
                (client.descriptors.page.listCertificates.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listCertificates without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ListCertificatesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.Certificate()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.Certificate()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.Certificate()),
            ];
            client.descriptors.page.listCertificates.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.security.privateca.v1beta1.ICertificate[] = [];
            const iterable = client.listCertificatesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listCertificates.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listCertificates.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listCertificates with error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ListCertificatesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listCertificates.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listCertificatesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.security.privateca.v1beta1.ICertificate[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listCertificates.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listCertificates.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listCertificateAuthorities', () => {
        it('invokes listCertificateAuthorities without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ListCertificateAuthoritiesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CertificateAuthority()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CertificateAuthority()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CertificateAuthority()),
            ];
            client.innerApiCalls.listCertificateAuthorities = stubSimpleCall(expectedResponse);
            const [response] = await client.listCertificateAuthorities(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listCertificateAuthorities as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listCertificateAuthorities without error using callback', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ListCertificateAuthoritiesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CertificateAuthority()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CertificateAuthority()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CertificateAuthority()),
            ];
            client.innerApiCalls.listCertificateAuthorities = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listCertificateAuthorities(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listCertificateAuthorities as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listCertificateAuthorities with error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ListCertificateAuthoritiesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listCertificateAuthorities = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listCertificateAuthorities(request), expectedError);
            assert((client.innerApiCalls.listCertificateAuthorities as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listCertificateAuthoritiesStream without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ListCertificateAuthoritiesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CertificateAuthority()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CertificateAuthority()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CertificateAuthority()),
            ];
            client.descriptors.page.listCertificateAuthorities.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listCertificateAuthoritiesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.security.privateca.v1beta1.CertificateAuthority[] = [];
                stream.on('data', (response: protos.google.cloud.security.privateca.v1beta1.CertificateAuthority) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listCertificateAuthorities.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listCertificateAuthorities, request));
            assert.strictEqual(
                (client.descriptors.page.listCertificateAuthorities.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listCertificateAuthoritiesStream with error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ListCertificateAuthoritiesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listCertificateAuthorities.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listCertificateAuthoritiesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.security.privateca.v1beta1.CertificateAuthority[] = [];
                stream.on('data', (response: protos.google.cloud.security.privateca.v1beta1.CertificateAuthority) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listCertificateAuthorities.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listCertificateAuthorities, request));
            assert.strictEqual(
                (client.descriptors.page.listCertificateAuthorities.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listCertificateAuthorities without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ListCertificateAuthoritiesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CertificateAuthority()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CertificateAuthority()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CertificateAuthority()),
            ];
            client.descriptors.page.listCertificateAuthorities.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority[] = [];
            const iterable = client.listCertificateAuthoritiesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listCertificateAuthorities.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listCertificateAuthorities.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listCertificateAuthorities with error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ListCertificateAuthoritiesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listCertificateAuthorities.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listCertificateAuthoritiesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listCertificateAuthorities.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listCertificateAuthorities.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listCertificateRevocationLists', () => {
        it('invokes listCertificateRevocationLists without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ListCertificateRevocationListsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CertificateRevocationList()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CertificateRevocationList()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CertificateRevocationList()),
            ];
            client.innerApiCalls.listCertificateRevocationLists = stubSimpleCall(expectedResponse);
            const [response] = await client.listCertificateRevocationLists(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listCertificateRevocationLists as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listCertificateRevocationLists without error using callback', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ListCertificateRevocationListsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CertificateRevocationList()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CertificateRevocationList()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CertificateRevocationList()),
            ];
            client.innerApiCalls.listCertificateRevocationLists = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listCertificateRevocationLists(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listCertificateRevocationLists as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listCertificateRevocationLists with error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ListCertificateRevocationListsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listCertificateRevocationLists = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listCertificateRevocationLists(request), expectedError);
            assert((client.innerApiCalls.listCertificateRevocationLists as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listCertificateRevocationListsStream without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ListCertificateRevocationListsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CertificateRevocationList()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CertificateRevocationList()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CertificateRevocationList()),
            ];
            client.descriptors.page.listCertificateRevocationLists.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listCertificateRevocationListsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.security.privateca.v1beta1.CertificateRevocationList[] = [];
                stream.on('data', (response: protos.google.cloud.security.privateca.v1beta1.CertificateRevocationList) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listCertificateRevocationLists.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listCertificateRevocationLists, request));
            assert.strictEqual(
                (client.descriptors.page.listCertificateRevocationLists.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listCertificateRevocationListsStream with error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ListCertificateRevocationListsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listCertificateRevocationLists.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listCertificateRevocationListsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.security.privateca.v1beta1.CertificateRevocationList[] = [];
                stream.on('data', (response: protos.google.cloud.security.privateca.v1beta1.CertificateRevocationList) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listCertificateRevocationLists.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listCertificateRevocationLists, request));
            assert.strictEqual(
                (client.descriptors.page.listCertificateRevocationLists.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listCertificateRevocationLists without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ListCertificateRevocationListsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CertificateRevocationList()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CertificateRevocationList()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.CertificateRevocationList()),
            ];
            client.descriptors.page.listCertificateRevocationLists.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList[] = [];
            const iterable = client.listCertificateRevocationListsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listCertificateRevocationLists.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listCertificateRevocationLists.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listCertificateRevocationLists with error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ListCertificateRevocationListsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listCertificateRevocationLists.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listCertificateRevocationListsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listCertificateRevocationLists.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listCertificateRevocationLists.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listReusableConfigs', () => {
        it('invokes listReusableConfigs without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ListReusableConfigsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ReusableConfig()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ReusableConfig()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ReusableConfig()),
            ];
            client.innerApiCalls.listReusableConfigs = stubSimpleCall(expectedResponse);
            const [response] = await client.listReusableConfigs(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listReusableConfigs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listReusableConfigs without error using callback', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ListReusableConfigsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ReusableConfig()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ReusableConfig()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ReusableConfig()),
            ];
            client.innerApiCalls.listReusableConfigs = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listReusableConfigs(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.security.privateca.v1beta1.IReusableConfig[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listReusableConfigs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listReusableConfigs with error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ListReusableConfigsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listReusableConfigs = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listReusableConfigs(request), expectedError);
            assert((client.innerApiCalls.listReusableConfigs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listReusableConfigsStream without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ListReusableConfigsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ReusableConfig()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ReusableConfig()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ReusableConfig()),
            ];
            client.descriptors.page.listReusableConfigs.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listReusableConfigsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.security.privateca.v1beta1.ReusableConfig[] = [];
                stream.on('data', (response: protos.google.cloud.security.privateca.v1beta1.ReusableConfig) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listReusableConfigs.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listReusableConfigs, request));
            assert.strictEqual(
                (client.descriptors.page.listReusableConfigs.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listReusableConfigsStream with error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ListReusableConfigsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listReusableConfigs.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listReusableConfigsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.security.privateca.v1beta1.ReusableConfig[] = [];
                stream.on('data', (response: protos.google.cloud.security.privateca.v1beta1.ReusableConfig) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listReusableConfigs.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listReusableConfigs, request));
            assert.strictEqual(
                (client.descriptors.page.listReusableConfigs.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listReusableConfigs without error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ListReusableConfigsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ReusableConfig()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ReusableConfig()),
              generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ReusableConfig()),
            ];
            client.descriptors.page.listReusableConfigs.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.security.privateca.v1beta1.IReusableConfig[] = [];
            const iterable = client.listReusableConfigsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listReusableConfigs.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listReusableConfigs.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listReusableConfigs with error', async () => {
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.security.privateca.v1beta1.ListReusableConfigsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listReusableConfigs.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listReusableConfigsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.security.privateca.v1beta1.IReusableConfig[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listReusableConfigs.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listReusableConfigs.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('Path templates', () => {

        describe('certificate', () => {
            const fakePath = "/rendered/path/certificate";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                certificate_authority: "certificateAuthorityValue",
                certificate: "certificateValue",
            };
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.certificatePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.certificatePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('certificatePath', () => {
                const result = client.certificatePath("projectValue", "locationValue", "certificateAuthorityValue", "certificateValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.certificatePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromCertificateName', () => {
                const result = client.matchProjectFromCertificateName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.certificatePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromCertificateName', () => {
                const result = client.matchLocationFromCertificateName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.certificatePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCertificateAuthorityFromCertificateName', () => {
                const result = client.matchCertificateAuthorityFromCertificateName(fakePath);
                assert.strictEqual(result, "certificateAuthorityValue");
                assert((client.pathTemplates.certificatePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCertificateFromCertificateName', () => {
                const result = client.matchCertificateFromCertificateName(fakePath);
                assert.strictEqual(result, "certificateValue");
                assert((client.pathTemplates.certificatePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('certificateAuthority', () => {
            const fakePath = "/rendered/path/certificateAuthority";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                certificate_authority: "certificateAuthorityValue",
            };
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.certificateAuthorityPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.certificateAuthorityPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('certificateAuthorityPath', () => {
                const result = client.certificateAuthorityPath("projectValue", "locationValue", "certificateAuthorityValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.certificateAuthorityPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromCertificateAuthorityName', () => {
                const result = client.matchProjectFromCertificateAuthorityName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.certificateAuthorityPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromCertificateAuthorityName', () => {
                const result = client.matchLocationFromCertificateAuthorityName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.certificateAuthorityPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCertificateAuthorityFromCertificateAuthorityName', () => {
                const result = client.matchCertificateAuthorityFromCertificateAuthorityName(fakePath);
                assert.strictEqual(result, "certificateAuthorityValue");
                assert((client.pathTemplates.certificateAuthorityPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('certificateRevocationList', () => {
            const fakePath = "/rendered/path/certificateRevocationList";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                certificate_authority: "certificateAuthorityValue",
                certificate_revocation_list: "certificateRevocationListValue",
            };
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.certificateRevocationListPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.certificateRevocationListPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('certificateRevocationListPath', () => {
                const result = client.certificateRevocationListPath("projectValue", "locationValue", "certificateAuthorityValue", "certificateRevocationListValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.certificateRevocationListPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromCertificateRevocationListName', () => {
                const result = client.matchProjectFromCertificateRevocationListName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.certificateRevocationListPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromCertificateRevocationListName', () => {
                const result = client.matchLocationFromCertificateRevocationListName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.certificateRevocationListPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCertificateAuthorityFromCertificateRevocationListName', () => {
                const result = client.matchCertificateAuthorityFromCertificateRevocationListName(fakePath);
                assert.strictEqual(result, "certificateAuthorityValue");
                assert((client.pathTemplates.certificateRevocationListPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCertificateRevocationListFromCertificateRevocationListName', () => {
                const result = client.matchCertificateRevocationListFromCertificateRevocationListName(fakePath);
                assert.strictEqual(result, "certificateRevocationListValue");
                assert((client.pathTemplates.certificateRevocationListPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('location', () => {
            const fakePath = "/rendered/path/location";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
            };
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.locationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.locationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('locationPath', () => {
                const result = client.locationPath("projectValue", "locationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.locationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromLocationName', () => {
                const result = client.matchProjectFromLocationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromLocationName', () => {
                const result = client.matchLocationFromLocationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('reusableConfig', () => {
            const fakePath = "/rendered/path/reusableConfig";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                reusable_config: "reusableConfigValue",
            };
            const client = new certificateauthorityserviceModule.v1beta1.CertificateAuthorityServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.reusableConfigPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.reusableConfigPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('reusableConfigPath', () => {
                const result = client.reusableConfigPath("projectValue", "locationValue", "reusableConfigValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.reusableConfigPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromReusableConfigName', () => {
                const result = client.matchProjectFromReusableConfigName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.reusableConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromReusableConfigName', () => {
                const result = client.matchLocationFromReusableConfigName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.reusableConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchReusableConfigFromReusableConfigName', () => {
                const result = client.matchReusableConfigFromReusableConfigName(fakePath);
                assert.strictEqual(result, "reusableConfigValue");
                assert((client.pathTemplates.reusableConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
