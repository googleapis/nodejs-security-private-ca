// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import * as path from 'path';

import {Transform} from 'stream';
import {RequestType} from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import * as gapicConfig from './certificate_authority_service_client_config.json';
import {operationsProtos} from 'google-gax';
const version = require('../../../package.json').version;

/**
 *  {@link google.cloud.security.privateca.v1beta1.CertificateAuthorityService|Certificate Authority Service} manages private
 *  certificate authorities and issued certificates.
 * @class
 * @memberof v1beta1
 */
export class CertificateAuthorityServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  certificateAuthorityServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of CertificateAuthorityServiceClient.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */

  constructor(opts?: ClientOptions) {
    // Ensure that options include the service address and port.
    const staticMembers = this
      .constructor as typeof CertificateAuthorityServiceClient;
    const servicePath =
      opts && opts.servicePath
        ? opts.servicePath
        : opts && opts.apiEndpoint
        ? opts.apiEndpoint
        : staticMembers.servicePath;
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;

    // users can override the config from client side, like retry codes name.
    // The detailed structure of the clientConfig can be found here: https://github.com/googleapis/gax-nodejs/blob/master/src/gax.ts#L546
    // The way to override client config for Showcase API:
    //
    // const customConfig = {"interfaces": {"google.showcase.v1beta1.Echo": {"methods": {"Echo": {"retry_codes_name": "idempotent", "retry_params_name": "default"}}}}}
    // const showcaseClient = new showcaseClient({ projectId, customConfig });
    opts.clientConfig = opts.clientConfig || {};

    // If we're running in browser, it's OK to omit `fallback` since
    // google-gax has `browser` field in its `package.json`.
    // For Electron (which does not respect `browser` field),
    // pass `{fallback: true}` to the CertificateAuthorityServiceClient constructor.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this
      .constructor as typeof CertificateAuthorityServiceClient).scopes;
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(
      __dirname,
      '..',
      '..',
      'protos',
      'protos.json'
    );
    this._protos = this._gaxGrpc.loadProto(
      opts.fallback
        ? // eslint-disable-next-line @typescript-eslint/no-var-requires
          require('../../protos/protos.json')
        : nodejsProtoPath
    );

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      certificatePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/certificateAuthorities/{certificate_authority}/certificates/{certificate}'
      ),
      certificateAuthorityPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/certificateAuthorities/{certificate_authority}'
      ),
      certificateRevocationListPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/certificateAuthorities/{certificate_authority}/certificateRevocationLists/{certificate_revocation_list}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      reusableConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/reusableConfigs/{reusable_config}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listCertificates: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'certificates'
      ),
      listCertificateAuthorities: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'certificateAuthorities'
      ),
      listCertificateRevocationLists: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'certificateRevocationLists'
      ),
      listReusableConfigs: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'reusableConfigs'
      ),
    };

    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const protoFilesRoot = opts.fallback
      ? this._gaxModule.protobuf.Root.fromJSON(
          // eslint-disable-next-line @typescript-eslint/no-var-requires
          require('../../protos/protos.json')
        )
      : this._gaxModule.protobuf.loadSync(nodejsProtoPath);

    this.operationsClient = this._gaxModule
      .lro({
        auth: this.auth,
        grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
      })
      .operationsClient(opts);
    const activateCertificateAuthorityResponse = protoFilesRoot.lookup(
      '.google.cloud.security.privateca.v1beta1.CertificateAuthority'
    ) as gax.protobuf.Type;
    const activateCertificateAuthorityMetadata = protoFilesRoot.lookup(
      '.google.cloud.security.privateca.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createCertificateAuthorityResponse = protoFilesRoot.lookup(
      '.google.cloud.security.privateca.v1beta1.CertificateAuthority'
    ) as gax.protobuf.Type;
    const createCertificateAuthorityMetadata = protoFilesRoot.lookup(
      '.google.cloud.security.privateca.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const disableCertificateAuthorityResponse = protoFilesRoot.lookup(
      '.google.cloud.security.privateca.v1beta1.CertificateAuthority'
    ) as gax.protobuf.Type;
    const disableCertificateAuthorityMetadata = protoFilesRoot.lookup(
      '.google.cloud.security.privateca.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const enableCertificateAuthorityResponse = protoFilesRoot.lookup(
      '.google.cloud.security.privateca.v1beta1.CertificateAuthority'
    ) as gax.protobuf.Type;
    const enableCertificateAuthorityMetadata = protoFilesRoot.lookup(
      '.google.cloud.security.privateca.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const restoreCertificateAuthorityResponse = protoFilesRoot.lookup(
      '.google.cloud.security.privateca.v1beta1.CertificateAuthority'
    ) as gax.protobuf.Type;
    const restoreCertificateAuthorityMetadata = protoFilesRoot.lookup(
      '.google.cloud.security.privateca.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const scheduleDeleteCertificateAuthorityResponse = protoFilesRoot.lookup(
      '.google.cloud.security.privateca.v1beta1.CertificateAuthority'
    ) as gax.protobuf.Type;
    const scheduleDeleteCertificateAuthorityMetadata = protoFilesRoot.lookup(
      '.google.cloud.security.privateca.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateCertificateAuthorityResponse = protoFilesRoot.lookup(
      '.google.cloud.security.privateca.v1beta1.CertificateAuthority'
    ) as gax.protobuf.Type;
    const updateCertificateAuthorityMetadata = protoFilesRoot.lookup(
      '.google.cloud.security.privateca.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createCertificateRevocationListResponse = protoFilesRoot.lookup(
      '.google.cloud.security.privateca.v1beta1.CertificateRevocationList'
    ) as gax.protobuf.Type;
    const createCertificateRevocationListMetadata = protoFilesRoot.lookup(
      '.google.cloud.security.privateca.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateCertificateRevocationListResponse = protoFilesRoot.lookup(
      '.google.cloud.security.privateca.v1beta1.CertificateRevocationList'
    ) as gax.protobuf.Type;
    const updateCertificateRevocationListMetadata = protoFilesRoot.lookup(
      '.google.cloud.security.privateca.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createReusableConfigResponse = protoFilesRoot.lookup(
      '.google.cloud.security.privateca.v1beta1.ReusableConfig'
    ) as gax.protobuf.Type;
    const createReusableConfigMetadata = protoFilesRoot.lookup(
      '.google.cloud.security.privateca.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteReusableConfigResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteReusableConfigMetadata = protoFilesRoot.lookup(
      '.google.cloud.security.privateca.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateReusableConfigResponse = protoFilesRoot.lookup(
      '.google.cloud.security.privateca.v1beta1.ReusableConfig'
    ) as gax.protobuf.Type;
    const updateReusableConfigMetadata = protoFilesRoot.lookup(
      '.google.cloud.security.privateca.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      activateCertificateAuthority: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        activateCertificateAuthorityResponse.decode.bind(
          activateCertificateAuthorityResponse
        ),
        activateCertificateAuthorityMetadata.decode.bind(
          activateCertificateAuthorityMetadata
        )
      ),
      createCertificateAuthority: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createCertificateAuthorityResponse.decode.bind(
          createCertificateAuthorityResponse
        ),
        createCertificateAuthorityMetadata.decode.bind(
          createCertificateAuthorityMetadata
        )
      ),
      disableCertificateAuthority: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        disableCertificateAuthorityResponse.decode.bind(
          disableCertificateAuthorityResponse
        ),
        disableCertificateAuthorityMetadata.decode.bind(
          disableCertificateAuthorityMetadata
        )
      ),
      enableCertificateAuthority: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        enableCertificateAuthorityResponse.decode.bind(
          enableCertificateAuthorityResponse
        ),
        enableCertificateAuthorityMetadata.decode.bind(
          enableCertificateAuthorityMetadata
        )
      ),
      restoreCertificateAuthority: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        restoreCertificateAuthorityResponse.decode.bind(
          restoreCertificateAuthorityResponse
        ),
        restoreCertificateAuthorityMetadata.decode.bind(
          restoreCertificateAuthorityMetadata
        )
      ),
      scheduleDeleteCertificateAuthority: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        scheduleDeleteCertificateAuthorityResponse.decode.bind(
          scheduleDeleteCertificateAuthorityResponse
        ),
        scheduleDeleteCertificateAuthorityMetadata.decode.bind(
          scheduleDeleteCertificateAuthorityMetadata
        )
      ),
      updateCertificateAuthority: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateCertificateAuthorityResponse.decode.bind(
          updateCertificateAuthorityResponse
        ),
        updateCertificateAuthorityMetadata.decode.bind(
          updateCertificateAuthorityMetadata
        )
      ),
      createCertificateRevocationList: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createCertificateRevocationListResponse.decode.bind(
          createCertificateRevocationListResponse
        ),
        createCertificateRevocationListMetadata.decode.bind(
          createCertificateRevocationListMetadata
        )
      ),
      updateCertificateRevocationList: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateCertificateRevocationListResponse.decode.bind(
          updateCertificateRevocationListResponse
        ),
        updateCertificateRevocationListMetadata.decode.bind(
          updateCertificateRevocationListMetadata
        )
      ),
      createReusableConfig: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createReusableConfigResponse.decode.bind(createReusableConfigResponse),
        createReusableConfigMetadata.decode.bind(createReusableConfigMetadata)
      ),
      deleteReusableConfig: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteReusableConfigResponse.decode.bind(deleteReusableConfigResponse),
        deleteReusableConfigMetadata.decode.bind(deleteReusableConfigMetadata)
      ),
      updateReusableConfig: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateReusableConfigResponse.decode.bind(updateReusableConfigResponse),
        updateReusableConfigMetadata.decode.bind(updateReusableConfigMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.security.privateca.v1beta1.CertificateAuthorityService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.certificateAuthorityServiceStub) {
      return this.certificateAuthorityServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.security.privateca.v1beta1.CertificateAuthorityService.
    this.certificateAuthorityServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.security.privateca.v1beta1.CertificateAuthorityService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.security.privateca.v1beta1
            .CertificateAuthorityService,
      this._opts
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const certificateAuthorityServiceStubMethods = [
      'createCertificate',
      'getCertificate',
      'listCertificates',
      'revokeCertificate',
      'updateCertificate',
      'activateCertificateAuthority',
      'createCertificateAuthority',
      'disableCertificateAuthority',
      'enableCertificateAuthority',
      'fetchCertificateAuthorityCsr',
      'getCertificateAuthority',
      'listCertificateAuthorities',
      'restoreCertificateAuthority',
      'scheduleDeleteCertificateAuthority',
      'updateCertificateAuthority',
      'createCertificateRevocationList',
      'getCertificateRevocationList',
      'listCertificateRevocationLists',
      'updateCertificateRevocationList',
      'createReusableConfig',
      'deleteReusableConfig',
      'getReusableConfig',
      'listReusableConfigs',
      'updateReusableConfig',
    ];
    for (const methodName of certificateAuthorityServiceStubMethods) {
      const callPromise = this.certificateAuthorityServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.certificateAuthorityServiceStub;
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'privateca.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'privateca.googleapis.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  createCertificate(
    request: protos.google.cloud.security.privateca.v1beta1.ICreateCertificateRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.security.privateca.v1beta1.ICertificate,
      (
        | protos.google.cloud.security.privateca.v1beta1.ICreateCertificateRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createCertificate(
    request: protos.google.cloud.security.privateca.v1beta1.ICreateCertificateRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.cloud.security.privateca.v1beta1.ICertificate,
      | protos.google.cloud.security.privateca.v1beta1.ICreateCertificateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createCertificate(
    request: protos.google.cloud.security.privateca.v1beta1.ICreateCertificateRequest,
    callback: Callback<
      protos.google.cloud.security.privateca.v1beta1.ICertificate,
      | protos.google.cloud.security.privateca.v1beta1.ICreateCertificateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Create a new {@link google.cloud.security.privateca.v1beta1.Certificate|Certificate} in a given Project, Location from a particular
   * {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthority}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the location and {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthority}
   *   associated with the {@link google.cloud.security.privateca.v1beta1.Certificate|Certificate}, in the format
   *   `projects/* /locations/* /certificateAuthorities/*`.
   * @param {string} [request.certificateId]
   *   Optional. It must be unique within a location and match the regular
   *   expression `[a-zA-Z0-9-]{1,63}`. This field is required when using a
   *   {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthority} in the Enterprise {@link google.cloud.security.privateca.v1beta1.CertificateAuthority.Tier|CertificateAuthority.Tier},
   *   but is optional and its value is ignored otherwise.
   * @param {google.cloud.security.privateca.v1beta1.Certificate} request.certificate
   *   Required. A {@link google.cloud.security.privateca.v1beta1.Certificate|Certificate} with initial field values.
   * @param {string} [request.requestId]
   *   Optional. An ID to identify requests. Specify a unique request ID so that if you must
   *   retry your request, the server will know to ignore the request if it has
   *   already been completed. The server will guarantee that for at least 60
   *   minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and t
   *   he request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Certificate]{@link google.cloud.security.privateca.v1beta1.Certificate}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createCertificate(
    request: protos.google.cloud.security.privateca.v1beta1.ICreateCertificateRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.cloud.security.privateca.v1beta1.ICertificate,
          | protos.google.cloud.security.privateca.v1beta1.ICreateCertificateRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.security.privateca.v1beta1.ICertificate,
      | protos.google.cloud.security.privateca.v1beta1.ICreateCertificateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.security.privateca.v1beta1.ICertificate,
      (
        | protos.google.cloud.security.privateca.v1beta1.ICreateCertificateRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createCertificate(request, options, callback);
  }
  getCertificate(
    request: protos.google.cloud.security.privateca.v1beta1.IGetCertificateRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.security.privateca.v1beta1.ICertificate,
      (
        | protos.google.cloud.security.privateca.v1beta1.IGetCertificateRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getCertificate(
    request: protos.google.cloud.security.privateca.v1beta1.IGetCertificateRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.cloud.security.privateca.v1beta1.ICertificate,
      | protos.google.cloud.security.privateca.v1beta1.IGetCertificateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getCertificate(
    request: protos.google.cloud.security.privateca.v1beta1.IGetCertificateRequest,
    callback: Callback<
      protos.google.cloud.security.privateca.v1beta1.ICertificate,
      | protos.google.cloud.security.privateca.v1beta1.IGetCertificateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Returns a {@link google.cloud.security.privateca.v1beta1.Certificate|Certificate}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The {@link google.cloud.security.privateca.v1beta1.Certificate.name|name} of the {@link google.cloud.security.privateca.v1beta1.Certificate|Certificate} to get.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Certificate]{@link google.cloud.security.privateca.v1beta1.Certificate}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getCertificate(
    request: protos.google.cloud.security.privateca.v1beta1.IGetCertificateRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.cloud.security.privateca.v1beta1.ICertificate,
          | protos.google.cloud.security.privateca.v1beta1.IGetCertificateRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.security.privateca.v1beta1.ICertificate,
      | protos.google.cloud.security.privateca.v1beta1.IGetCertificateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.security.privateca.v1beta1.ICertificate,
      (
        | protos.google.cloud.security.privateca.v1beta1.IGetCertificateRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getCertificate(request, options, callback);
  }
  revokeCertificate(
    request: protos.google.cloud.security.privateca.v1beta1.IRevokeCertificateRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.security.privateca.v1beta1.ICertificate,
      (
        | protos.google.cloud.security.privateca.v1beta1.IRevokeCertificateRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  revokeCertificate(
    request: protos.google.cloud.security.privateca.v1beta1.IRevokeCertificateRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.cloud.security.privateca.v1beta1.ICertificate,
      | protos.google.cloud.security.privateca.v1beta1.IRevokeCertificateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  revokeCertificate(
    request: protos.google.cloud.security.privateca.v1beta1.IRevokeCertificateRequest,
    callback: Callback<
      protos.google.cloud.security.privateca.v1beta1.ICertificate,
      | protos.google.cloud.security.privateca.v1beta1.IRevokeCertificateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Revoke a {@link google.cloud.security.privateca.v1beta1.Certificate|Certificate}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name for this {@link google.cloud.security.privateca.v1beta1.Certificate|Certificate} in the
   *   format `projects/* /locations/* /certificateAuthorities/* /certificates/*`.
   * @param {google.cloud.security.privateca.v1beta1.RevocationReason} request.reason
   *   Required. The {@link google.cloud.security.privateca.v1beta1.RevocationReason|RevocationReason} for revoking this certificate.
   * @param {string} [request.requestId]
   *   Optional. An ID to identify requests. Specify a unique request ID so that if you must
   *   retry your request, the server will know to ignore the request if it has
   *   already been completed. The server will guarantee that for at least 60
   *   minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and t
   *   he request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Certificate]{@link google.cloud.security.privateca.v1beta1.Certificate}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  revokeCertificate(
    request: protos.google.cloud.security.privateca.v1beta1.IRevokeCertificateRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.cloud.security.privateca.v1beta1.ICertificate,
          | protos.google.cloud.security.privateca.v1beta1.IRevokeCertificateRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.security.privateca.v1beta1.ICertificate,
      | protos.google.cloud.security.privateca.v1beta1.IRevokeCertificateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.security.privateca.v1beta1.ICertificate,
      (
        | protos.google.cloud.security.privateca.v1beta1.IRevokeCertificateRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.revokeCertificate(request, options, callback);
  }
  updateCertificate(
    request: protos.google.cloud.security.privateca.v1beta1.IUpdateCertificateRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.security.privateca.v1beta1.ICertificate,
      (
        | protos.google.cloud.security.privateca.v1beta1.IUpdateCertificateRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updateCertificate(
    request: protos.google.cloud.security.privateca.v1beta1.IUpdateCertificateRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.cloud.security.privateca.v1beta1.ICertificate,
      | protos.google.cloud.security.privateca.v1beta1.IUpdateCertificateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateCertificate(
    request: protos.google.cloud.security.privateca.v1beta1.IUpdateCertificateRequest,
    callback: Callback<
      protos.google.cloud.security.privateca.v1beta1.ICertificate,
      | protos.google.cloud.security.privateca.v1beta1.IUpdateCertificateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Update a {@link google.cloud.security.privateca.v1beta1.Certificate|Certificate}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.security.privateca.v1beta1.Certificate} request.certificate
   *   Required. {@link google.cloud.security.privateca.v1beta1.Certificate|Certificate} with updated values.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. A list of fields to be updated in this request.
   * @param {string} [request.requestId]
   *   Optional. An ID to identify requests. Specify a unique request ID so that if you must
   *   retry your request, the server will know to ignore the request if it has
   *   already been completed. The server will guarantee that for at least 60
   *   minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and t
   *   he request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Certificate]{@link google.cloud.security.privateca.v1beta1.Certificate}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  updateCertificate(
    request: protos.google.cloud.security.privateca.v1beta1.IUpdateCertificateRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.cloud.security.privateca.v1beta1.ICertificate,
          | protos.google.cloud.security.privateca.v1beta1.IUpdateCertificateRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.security.privateca.v1beta1.ICertificate,
      | protos.google.cloud.security.privateca.v1beta1.IUpdateCertificateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.security.privateca.v1beta1.ICertificate,
      (
        | protos.google.cloud.security.privateca.v1beta1.IUpdateCertificateRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'certificate.name': request.certificate!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateCertificate(request, options, callback);
  }
  fetchCertificateAuthorityCsr(
    request: protos.google.cloud.security.privateca.v1beta1.IFetchCertificateAuthorityCsrRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.security.privateca.v1beta1.IFetchCertificateAuthorityCsrResponse,
      (
        | protos.google.cloud.security.privateca.v1beta1.IFetchCertificateAuthorityCsrRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  fetchCertificateAuthorityCsr(
    request: protos.google.cloud.security.privateca.v1beta1.IFetchCertificateAuthorityCsrRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.cloud.security.privateca.v1beta1.IFetchCertificateAuthorityCsrResponse,
      | protos.google.cloud.security.privateca.v1beta1.IFetchCertificateAuthorityCsrRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  fetchCertificateAuthorityCsr(
    request: protos.google.cloud.security.privateca.v1beta1.IFetchCertificateAuthorityCsrRequest,
    callback: Callback<
      protos.google.cloud.security.privateca.v1beta1.IFetchCertificateAuthorityCsrResponse,
      | protos.google.cloud.security.privateca.v1beta1.IFetchCertificateAuthorityCsrRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Fetch a certificate signing request (CSR) from a {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthority}
   * that is in state
   * {@link google.cloud.security.privateca.v1beta1.CertificateAuthority.State.PENDING_ACTIVATION|PENDING_ACTIVATION} and is
   * of type {@link google.cloud.security.privateca.v1beta1.CertificateAuthority.Type.SUBORDINATE|SUBORDINATE}. The CSR must
   * then be signed by the desired parent Certificate Authority, which could be
   * another {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthority} resource, or could be an on-prem
   * certificate authority. See also {@link google.cloud.security.privateca.v1beta1.CertificateAuthorityService.ActivateCertificateAuthority|ActivateCertificateAuthority}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name for this {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthority} in the
   *   format `projects/* /locations/* /certificateAuthorities/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [FetchCertificateAuthorityCsrResponse]{@link google.cloud.security.privateca.v1beta1.FetchCertificateAuthorityCsrResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  fetchCertificateAuthorityCsr(
    request: protos.google.cloud.security.privateca.v1beta1.IFetchCertificateAuthorityCsrRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.cloud.security.privateca.v1beta1.IFetchCertificateAuthorityCsrResponse,
          | protos.google.cloud.security.privateca.v1beta1.IFetchCertificateAuthorityCsrRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.security.privateca.v1beta1.IFetchCertificateAuthorityCsrResponse,
      | protos.google.cloud.security.privateca.v1beta1.IFetchCertificateAuthorityCsrRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.security.privateca.v1beta1.IFetchCertificateAuthorityCsrResponse,
      (
        | protos.google.cloud.security.privateca.v1beta1.IFetchCertificateAuthorityCsrRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.fetchCertificateAuthorityCsr(
      request,
      options,
      callback
    );
  }
  getCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.IGetCertificateAuthorityRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
      (
        | protos.google.cloud.security.privateca.v1beta1.IGetCertificateAuthorityRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.IGetCertificateAuthorityRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
      | protos.google.cloud.security.privateca.v1beta1.IGetCertificateAuthorityRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.IGetCertificateAuthorityRequest,
    callback: Callback<
      protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
      | protos.google.cloud.security.privateca.v1beta1.IGetCertificateAuthorityRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Returns a {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthority}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The {@link google.cloud.security.privateca.v1beta1.CertificateAuthority.name|name} of the {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthority} to
   *   get.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [CertificateAuthority]{@link google.cloud.security.privateca.v1beta1.CertificateAuthority}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.IGetCertificateAuthorityRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
          | protos.google.cloud.security.privateca.v1beta1.IGetCertificateAuthorityRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
      | protos.google.cloud.security.privateca.v1beta1.IGetCertificateAuthorityRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
      (
        | protos.google.cloud.security.privateca.v1beta1.IGetCertificateAuthorityRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getCertificateAuthority(
      request,
      options,
      callback
    );
  }
  getCertificateRevocationList(
    request: protos.google.cloud.security.privateca.v1beta1.IGetCertificateRevocationListRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList,
      (
        | protos.google.cloud.security.privateca.v1beta1.IGetCertificateRevocationListRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getCertificateRevocationList(
    request: protos.google.cloud.security.privateca.v1beta1.IGetCertificateRevocationListRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList,
      | protos.google.cloud.security.privateca.v1beta1.IGetCertificateRevocationListRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getCertificateRevocationList(
    request: protos.google.cloud.security.privateca.v1beta1.IGetCertificateRevocationListRequest,
    callback: Callback<
      protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList,
      | protos.google.cloud.security.privateca.v1beta1.IGetCertificateRevocationListRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Returns a {@link google.cloud.security.privateca.v1beta1.CertificateRevocationList|CertificateRevocationList}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The {@link google.cloud.security.privateca.v1beta1.CertificateRevocationList.name|name} of the
   *   {@link google.cloud.security.privateca.v1beta1.CertificateRevocationList|CertificateRevocationList} to get.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [CertificateRevocationList]{@link google.cloud.security.privateca.v1beta1.CertificateRevocationList}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getCertificateRevocationList(
    request: protos.google.cloud.security.privateca.v1beta1.IGetCertificateRevocationListRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList,
          | protos.google.cloud.security.privateca.v1beta1.IGetCertificateRevocationListRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList,
      | protos.google.cloud.security.privateca.v1beta1.IGetCertificateRevocationListRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList,
      (
        | protos.google.cloud.security.privateca.v1beta1.IGetCertificateRevocationListRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getCertificateRevocationList(
      request,
      options,
      callback
    );
  }
  getReusableConfig(
    request: protos.google.cloud.security.privateca.v1beta1.IGetReusableConfigRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.security.privateca.v1beta1.IReusableConfig,
      (
        | protos.google.cloud.security.privateca.v1beta1.IGetReusableConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getReusableConfig(
    request: protos.google.cloud.security.privateca.v1beta1.IGetReusableConfigRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.cloud.security.privateca.v1beta1.IReusableConfig,
      | protos.google.cloud.security.privateca.v1beta1.IGetReusableConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getReusableConfig(
    request: protos.google.cloud.security.privateca.v1beta1.IGetReusableConfigRequest,
    callback: Callback<
      protos.google.cloud.security.privateca.v1beta1.IReusableConfig,
      | protos.google.cloud.security.privateca.v1beta1.IGetReusableConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Returns a {@link google.cloud.security.privateca.v1beta1.ReusableConfig|ReusableConfig}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The {@link ReusableConfigs.name|name} of the {@link |ReusableConfigs} to get.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ReusableConfig]{@link google.cloud.security.privateca.v1beta1.ReusableConfig}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getReusableConfig(
    request: protos.google.cloud.security.privateca.v1beta1.IGetReusableConfigRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.cloud.security.privateca.v1beta1.IReusableConfig,
          | protos.google.cloud.security.privateca.v1beta1.IGetReusableConfigRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.security.privateca.v1beta1.IReusableConfig,
      | protos.google.cloud.security.privateca.v1beta1.IGetReusableConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.security.privateca.v1beta1.IReusableConfig,
      (
        | protos.google.cloud.security.privateca.v1beta1.IGetReusableConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getReusableConfig(request, options, callback);
  }

  activateCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.IActivateCertificateAuthorityRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  activateCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.IActivateCertificateAuthorityRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  activateCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.IActivateCertificateAuthorityRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Activate a {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthority} that is in state
   * {@link google.cloud.security.privateca.v1beta1.CertificateAuthority.State.PENDING_ACTIVATION|PENDING_ACTIVATION} and is
   * of type {@link google.cloud.security.privateca.v1beta1.CertificateAuthority.Type.SUBORDINATE|SUBORDINATE}. After the
   * parent Certificate Authority signs a certificate signing request from
   * {@link google.cloud.security.privateca.v1beta1.CertificateAuthorityService.FetchCertificateAuthorityCsr|FetchCertificateAuthorityCsr}, this method can complete the activation
   * process.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name for this {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthority} in the
   *   format `projects/* /locations/* /certificateAuthorities/*`.
   * @param {string} request.pemCaCertificate
   *   Required. The signed CA certificate issued from
   *   {@link google.cloud.security.privateca.v1beta1.FetchCertificateAuthorityCsrResponse.pem_csr|FetchCertificateAuthorityCsrResponse.pem_csr}.
   * @param {google.cloud.security.privateca.v1beta1.SubordinateConfig} request.subordinateConfig
   *   Required. Must include information about the issuer of 'pem_ca_certificate', and any
   *   further issuers until the self-signed CA.
   * @param {string} [request.requestId]
   *   Optional. An ID to identify requests. Specify a unique request ID so that if you must
   *   retry your request, the server will know to ignore the request if it has
   *   already been completed. The server will guarantee that for at least 60
   *   minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and t
   *   he request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  activateCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.IActivateCertificateAuthorityRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
            protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.activateCertificateAuthority(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by the activateCertificateAuthority() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkActivateCertificateAuthorityProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkActivateCertificateAuthorityProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.security.privateca.v1beta1.CertificateAuthority,
      protos.google.cloud.security.privateca.v1beta1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.activateCertificateAuthority,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.security.privateca.v1beta1.CertificateAuthority,
      protos.google.cloud.security.privateca.v1beta1.OperationMetadata
    >;
  }
  createCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.ICreateCertificateAuthorityRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.ICreateCertificateAuthorityRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.ICreateCertificateAuthorityRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Create a new {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthority} in a given Project and Location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the location associated with the
   *   {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthorities}, in the format
   *   `projects/* /locations/*`.
   * @param {string} request.certificateAuthorityId
   *   Required. It must be unique within a location and match the regular
   *   expression `[a-zA-Z0-9-]{1,63}`
   * @param {google.cloud.security.privateca.v1beta1.CertificateAuthority} request.certificateAuthority
   *   Required. A {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthority} with initial field values.
   * @param {string} [request.requestId]
   *   Optional. An ID to identify requests. Specify a unique request ID so that if you must
   *   retry your request, the server will know to ignore the request if it has
   *   already been completed. The server will guarantee that for at least 60
   *   minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and t
   *   he request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.ICreateCertificateAuthorityRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
            protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createCertificateAuthority(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by the createCertificateAuthority() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkCreateCertificateAuthorityProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkCreateCertificateAuthorityProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.security.privateca.v1beta1.CertificateAuthority,
      protos.google.cloud.security.privateca.v1beta1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.createCertificateAuthority,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.security.privateca.v1beta1.CertificateAuthority,
      protos.google.cloud.security.privateca.v1beta1.OperationMetadata
    >;
  }
  disableCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.IDisableCertificateAuthorityRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  disableCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.IDisableCertificateAuthorityRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  disableCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.IDisableCertificateAuthorityRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Disable a {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthority}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name for this {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthority} in the
   *   format `projects/* /locations/* /certificateAuthorities/*`.
   * @param {string} [request.requestId]
   *   Optional. An ID to identify requests. Specify a unique request ID so that if you must
   *   retry your request, the server will know to ignore the request if it has
   *   already been completed. The server will guarantee that for at least 60
   *   minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and t
   *   he request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  disableCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.IDisableCertificateAuthorityRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
            protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.disableCertificateAuthority(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by the disableCertificateAuthority() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkDisableCertificateAuthorityProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkDisableCertificateAuthorityProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.security.privateca.v1beta1.CertificateAuthority,
      protos.google.cloud.security.privateca.v1beta1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.disableCertificateAuthority,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.security.privateca.v1beta1.CertificateAuthority,
      protos.google.cloud.security.privateca.v1beta1.OperationMetadata
    >;
  }
  enableCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.IEnableCertificateAuthorityRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  enableCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.IEnableCertificateAuthorityRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  enableCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.IEnableCertificateAuthorityRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Enable a {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthority}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name for this {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthority} in the
   *   format `projects/* /locations/* /certificateAuthorities/*`.
   * @param {string} [request.requestId]
   *   Optional. An ID to identify requests. Specify a unique request ID so that if you must
   *   retry your request, the server will know to ignore the request if it has
   *   already been completed. The server will guarantee that for at least 60
   *   minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and t
   *   he request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  enableCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.IEnableCertificateAuthorityRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
            protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.enableCertificateAuthority(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by the enableCertificateAuthority() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkEnableCertificateAuthorityProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkEnableCertificateAuthorityProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.security.privateca.v1beta1.CertificateAuthority,
      protos.google.cloud.security.privateca.v1beta1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.enableCertificateAuthority,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.security.privateca.v1beta1.CertificateAuthority,
      protos.google.cloud.security.privateca.v1beta1.OperationMetadata
    >;
  }
  restoreCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.IRestoreCertificateAuthorityRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  restoreCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.IRestoreCertificateAuthorityRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  restoreCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.IRestoreCertificateAuthorityRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Restore a {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthority} that is scheduled for deletion.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name for this {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthority} in the
   *   format `projects/* /locations/* /certificateAuthorities/*`.
   * @param {string} [request.requestId]
   *   Optional. An ID to identify requests. Specify a unique request ID so that if you must
   *   retry your request, the server will know to ignore the request if it has
   *   already been completed. The server will guarantee that for at least 60
   *   minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and t
   *   he request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  restoreCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.IRestoreCertificateAuthorityRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
            protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.restoreCertificateAuthority(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by the restoreCertificateAuthority() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkRestoreCertificateAuthorityProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkRestoreCertificateAuthorityProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.security.privateca.v1beta1.CertificateAuthority,
      protos.google.cloud.security.privateca.v1beta1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.restoreCertificateAuthority,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.security.privateca.v1beta1.CertificateAuthority,
      protos.google.cloud.security.privateca.v1beta1.OperationMetadata
    >;
  }
  scheduleDeleteCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.IScheduleDeleteCertificateAuthorityRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  scheduleDeleteCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.IScheduleDeleteCertificateAuthorityRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  scheduleDeleteCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.IScheduleDeleteCertificateAuthorityRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Schedule a {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthority} for deletion.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name for this {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthority} in the
   *   format `projects/* /locations/* /certificateAuthorities/*`.
   * @param {string} [request.requestId]
   *   Optional. An ID to identify requests. Specify a unique request ID so that if you must
   *   retry your request, the server will know to ignore the request if it has
   *   already been completed. The server will guarantee that for at least 60
   *   minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and t
   *   he request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  scheduleDeleteCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.IScheduleDeleteCertificateAuthorityRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
            protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.scheduleDeleteCertificateAuthority(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by the scheduleDeleteCertificateAuthority() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkScheduleDeleteCertificateAuthorityProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkScheduleDeleteCertificateAuthorityProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.security.privateca.v1beta1.CertificateAuthority,
      protos.google.cloud.security.privateca.v1beta1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.scheduleDeleteCertificateAuthority,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.security.privateca.v1beta1.CertificateAuthority,
      protos.google.cloud.security.privateca.v1beta1.OperationMetadata
    >;
  }
  updateCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.IUpdateCertificateAuthorityRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.IUpdateCertificateAuthorityRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.IUpdateCertificateAuthorityRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Update a {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthority}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.security.privateca.v1beta1.CertificateAuthority} request.certificateAuthority
   *   Required. {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthority} with updated values.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. A list of fields to be updated in this request.
   * @param {string} [request.requestId]
   *   Optional. An ID to identify requests. Specify a unique request ID so that if you must
   *   retry your request, the server will know to ignore the request if it has
   *   already been completed. The server will guarantee that for at least 60
   *   minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and t
   *   he request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  updateCertificateAuthority(
    request: protos.google.cloud.security.privateca.v1beta1.IUpdateCertificateAuthorityRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
            protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'certificate_authority.name': request.certificateAuthority!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateCertificateAuthority(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by the updateCertificateAuthority() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkUpdateCertificateAuthorityProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkUpdateCertificateAuthorityProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.security.privateca.v1beta1.CertificateAuthority,
      protos.google.cloud.security.privateca.v1beta1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.updateCertificateAuthority,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.security.privateca.v1beta1.CertificateAuthority,
      protos.google.cloud.security.privateca.v1beta1.OperationMetadata
    >;
  }
  createCertificateRevocationList(
    request: protos.google.cloud.security.privateca.v1beta1.ICreateCertificateRevocationListRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createCertificateRevocationList(
    request: protos.google.cloud.security.privateca.v1beta1.ICreateCertificateRevocationListRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createCertificateRevocationList(
    request: protos.google.cloud.security.privateca.v1beta1.ICreateCertificateRevocationListRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Create a new {@link google.cloud.security.privateca.v1beta1.CertificateRevocationList|CertificateRevocationList} in a given Project, Location
   * for a particular {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthority}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the location and {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthority}
   *   associated with the {@link google.cloud.security.privateca.v1beta1.CertificateRevocationList|CertificateRevocationList}, in the format
   *   `projects/* /locations/* /certificateAuthorities/*`.
   * @param {string} request.certificateRevocationListId
   *   Required. It must be unique within a location and match the regular expression
   *   `[a-zA-Z0-9-]{1,63}`
   * @param {google.cloud.security.privateca.v1beta1.CertificateRevocationList} request.certificateRevocationList
   *   Required. A {@link google.cloud.security.privateca.v1beta1.CertificateRevocationList|CertificateRevocationList} with initial field values.
   * @param {string} [request.requestId]
   *   Optional. An ID to identify requests. Specify a unique request ID so that if you must
   *   retry your request, the server will know to ignore the request if it has
   *   already been completed. The server will guarantee that for at least 60
   *   minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and t
   *   he request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createCertificateRevocationList(
    request: protos.google.cloud.security.privateca.v1beta1.ICreateCertificateRevocationListRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList,
            protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createCertificateRevocationList(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by the createCertificateRevocationList() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkCreateCertificateRevocationListProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkCreateCertificateRevocationListProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.security.privateca.v1beta1.CertificateRevocationList,
      protos.google.cloud.security.privateca.v1beta1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.createCertificateRevocationList,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.security.privateca.v1beta1.CertificateRevocationList,
      protos.google.cloud.security.privateca.v1beta1.OperationMetadata
    >;
  }
  updateCertificateRevocationList(
    request: protos.google.cloud.security.privateca.v1beta1.IUpdateCertificateRevocationListRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateCertificateRevocationList(
    request: protos.google.cloud.security.privateca.v1beta1.IUpdateCertificateRevocationListRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateCertificateRevocationList(
    request: protos.google.cloud.security.privateca.v1beta1.IUpdateCertificateRevocationListRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Update a {@link google.cloud.security.privateca.v1beta1.CertificateRevocationList|CertificateRevocationList}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.security.privateca.v1beta1.CertificateRevocationList} request.certificateRevocationList
   *   Required. {@link google.cloud.security.privateca.v1beta1.CertificateRevocationList|CertificateRevocationList} with updated values.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. A list of fields to be updated in this request.
   * @param {string} [request.requestId]
   *   Optional. An ID to identify requests. Specify a unique request ID so that if you must
   *   retry your request, the server will know to ignore the request if it has
   *   already been completed. The server will guarantee that for at least 60
   *   minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and t
   *   he request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  updateCertificateRevocationList(
    request: protos.google.cloud.security.privateca.v1beta1.IUpdateCertificateRevocationListRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList,
            protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'certificate_revocation_list.name':
        request.certificateRevocationList!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateCertificateRevocationList(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by the updateCertificateRevocationList() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkUpdateCertificateRevocationListProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkUpdateCertificateRevocationListProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.security.privateca.v1beta1.CertificateRevocationList,
      protos.google.cloud.security.privateca.v1beta1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.updateCertificateRevocationList,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.security.privateca.v1beta1.CertificateRevocationList,
      protos.google.cloud.security.privateca.v1beta1.OperationMetadata
    >;
  }
  createReusableConfig(
    request: protos.google.cloud.security.privateca.v1beta1.ICreateReusableConfigRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.IReusableConfig,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createReusableConfig(
    request: protos.google.cloud.security.privateca.v1beta1.ICreateReusableConfigRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.IReusableConfig,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createReusableConfig(
    request: protos.google.cloud.security.privateca.v1beta1.ICreateReusableConfigRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.IReusableConfig,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Create a new {@link google.cloud.security.privateca.v1beta1.ReusableConfig|ReusableConfig} in a given Project and Location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the location associated with the
   *   {@link google.cloud.security.privateca.v1beta1.ReusableConfig|ReusableConfig}, in the format
   *   `projects/* /locations/*`.
   * @param {string} request.reusableConfigId
   *   Required. It must be unique within a location and match the regular
   *   expression `[a-zA-Z0-9-]{1,63}`
   * @param {google.cloud.security.privateca.v1beta1.ReusableConfig} request.reusableConfig
   *   Required. A {@link google.cloud.security.privateca.v1beta1.ReusableConfig|ReusableConfig} with initial field values.
   * @param {string} [request.requestId]
   *   Optional. An ID to identify requests. Specify a unique request ID so that if you must
   *   retry your request, the server will know to ignore the request if it has
   *   already been completed. The server will guarantee that for at least 60
   *   minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and t
   *   he request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createReusableConfig(
    request: protos.google.cloud.security.privateca.v1beta1.ICreateReusableConfigRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.security.privateca.v1beta1.IReusableConfig,
            protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.IReusableConfig,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.IReusableConfig,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createReusableConfig(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by the createReusableConfig() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkCreateReusableConfigProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkCreateReusableConfigProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.security.privateca.v1beta1.ReusableConfig,
      protos.google.cloud.security.privateca.v1beta1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.createReusableConfig,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.security.privateca.v1beta1.ReusableConfig,
      protos.google.cloud.security.privateca.v1beta1.OperationMetadata
    >;
  }
  deleteReusableConfig(
    request: protos.google.cloud.security.privateca.v1beta1.IDeleteReusableConfigRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteReusableConfig(
    request: protos.google.cloud.security.privateca.v1beta1.IDeleteReusableConfigRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteReusableConfig(
    request: protos.google.cloud.security.privateca.v1beta1.IDeleteReusableConfigRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * DeleteReusableConfig deletes a {@link google.cloud.security.privateca.v1beta1.ReusableConfig|ReusableConfig}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name for this {@link google.cloud.security.privateca.v1beta1.ReusableConfig|ReusableConfig} in the format
   *   `projects/* /locations/* /reusableConfigs/*`.
   * @param {string} [request.requestId]
   *   Optional. An ID to identify requests. Specify a unique request ID so that if you must
   *   retry your request, the server will know to ignore the request if it has
   *   already been completed. The server will guarantee that for at least 60
   *   minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and t
   *   he request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  deleteReusableConfig(
    request: protos.google.cloud.security.privateca.v1beta1.IDeleteReusableConfigRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteReusableConfig(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by the deleteReusableConfig() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkDeleteReusableConfigProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkDeleteReusableConfigProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.security.privateca.v1beta1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.deleteReusableConfig,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.security.privateca.v1beta1.OperationMetadata
    >;
  }
  updateReusableConfig(
    request: protos.google.cloud.security.privateca.v1beta1.IUpdateReusableConfigRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.IReusableConfig,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateReusableConfig(
    request: protos.google.cloud.security.privateca.v1beta1.IUpdateReusableConfigRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.IReusableConfig,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateReusableConfig(
    request: protos.google.cloud.security.privateca.v1beta1.IUpdateReusableConfigRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.IReusableConfig,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Update a {@link google.cloud.security.privateca.v1beta1.ReusableConfig|ReusableConfig}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.security.privateca.v1beta1.ReusableConfig} request.reusableConfig
   *   Required. {@link google.cloud.security.privateca.v1beta1.ReusableConfig|ReusableConfig} with updated values.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. A list of fields to be updated in this request.
   * @param {string} [request.requestId]
   *   Optional. An ID to identify requests. Specify a unique request ID so that if you must
   *   retry your request, the server will know to ignore the request if it has
   *   already been completed. The server will guarantee that for at least 60
   *   minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and t
   *   he request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  updateReusableConfig(
    request: protos.google.cloud.security.privateca.v1beta1.IUpdateReusableConfigRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.security.privateca.v1beta1.IReusableConfig,
            protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.IReusableConfig,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.security.privateca.v1beta1.IReusableConfig,
        protos.google.cloud.security.privateca.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'reusable_config.name': request.reusableConfig!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateReusableConfig(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by the updateReusableConfig() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkUpdateReusableConfigProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkUpdateReusableConfigProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.security.privateca.v1beta1.ReusableConfig,
      protos.google.cloud.security.privateca.v1beta1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.updateReusableConfig,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.security.privateca.v1beta1.ReusableConfig,
      protos.google.cloud.security.privateca.v1beta1.OperationMetadata
    >;
  }
  listCertificates(
    request: protos.google.cloud.security.privateca.v1beta1.IListCertificatesRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.security.privateca.v1beta1.ICertificate[],
      protos.google.cloud.security.privateca.v1beta1.IListCertificatesRequest | null,
      protos.google.cloud.security.privateca.v1beta1.IListCertificatesResponse
    ]
  >;
  listCertificates(
    request: protos.google.cloud.security.privateca.v1beta1.IListCertificatesRequest,
    options: gax.CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.security.privateca.v1beta1.IListCertificatesRequest,
      | protos.google.cloud.security.privateca.v1beta1.IListCertificatesResponse
      | null
      | undefined,
      protos.google.cloud.security.privateca.v1beta1.ICertificate
    >
  ): void;
  listCertificates(
    request: protos.google.cloud.security.privateca.v1beta1.IListCertificatesRequest,
    callback: PaginationCallback<
      protos.google.cloud.security.privateca.v1beta1.IListCertificatesRequest,
      | protos.google.cloud.security.privateca.v1beta1.IListCertificatesResponse
      | null
      | undefined,
      protos.google.cloud.security.privateca.v1beta1.ICertificate
    >
  ): void;
  /**
   * Lists {@link google.cloud.security.privateca.v1beta1.Certificate|Certificates}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the location associated with the
   *   {@link google.cloud.security.privateca.v1beta1.Certificate|Certificates}, in the format
   *   `projects/* /locations/* /certificateauthorities/*`.
   * @param {number} [request.pageSize]
   *   Optional. Limit on the number of
   *   {@link google.cloud.security.privateca.v1beta1.Certificate|Certificates} to include in the
   *   response. Further {@link google.cloud.security.privateca.v1beta1.Certificate|Certificates} can subsequently be obtained
   *   by including the
   *   {@link google.cloud.security.privateca.v1beta1.ListCertificatesResponse.next_page_token|ListCertificatesResponse.next_page_token} in a subsequent
   *   request. If unspecified, the server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. Pagination token, returned earlier via
   *   {@link google.cloud.security.privateca.v1beta1.ListCertificatesResponse.next_page_token|ListCertificatesResponse.next_page_token}.
   * @param {string} [request.filter]
   *   Optional. Only include resources that match the filter in the response.
   * @param {string} [request.orderBy]
   *   Optional. Specify how the results should be sorted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Certificate]{@link google.cloud.security.privateca.v1beta1.Certificate}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Certificate]{@link google.cloud.security.privateca.v1beta1.Certificate} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListCertificatesRequest]{@link google.cloud.security.privateca.v1beta1.ListCertificatesRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListCertificatesResponse]{@link google.cloud.security.privateca.v1beta1.ListCertificatesResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listCertificates(
    request: protos.google.cloud.security.privateca.v1beta1.IListCertificatesRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | PaginationCallback<
          protos.google.cloud.security.privateca.v1beta1.IListCertificatesRequest,
          | protos.google.cloud.security.privateca.v1beta1.IListCertificatesResponse
          | null
          | undefined,
          protos.google.cloud.security.privateca.v1beta1.ICertificate
        >,
    callback?: PaginationCallback<
      protos.google.cloud.security.privateca.v1beta1.IListCertificatesRequest,
      | protos.google.cloud.security.privateca.v1beta1.IListCertificatesResponse
      | null
      | undefined,
      protos.google.cloud.security.privateca.v1beta1.ICertificate
    >
  ): Promise<
    [
      protos.google.cloud.security.privateca.v1beta1.ICertificate[],
      protos.google.cloud.security.privateca.v1beta1.IListCertificatesRequest | null,
      protos.google.cloud.security.privateca.v1beta1.IListCertificatesResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listCertificates(request, options, callback);
  }

  /**
   * Equivalent to {@link listCertificates}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listCertificates} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the location associated with the
   *   {@link google.cloud.security.privateca.v1beta1.Certificate|Certificates}, in the format
   *   `projects/* /locations/* /certificateauthorities/*`.
   * @param {number} [request.pageSize]
   *   Optional. Limit on the number of
   *   {@link google.cloud.security.privateca.v1beta1.Certificate|Certificates} to include in the
   *   response. Further {@link google.cloud.security.privateca.v1beta1.Certificate|Certificates} can subsequently be obtained
   *   by including the
   *   {@link google.cloud.security.privateca.v1beta1.ListCertificatesResponse.next_page_token|ListCertificatesResponse.next_page_token} in a subsequent
   *   request. If unspecified, the server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. Pagination token, returned earlier via
   *   {@link google.cloud.security.privateca.v1beta1.ListCertificatesResponse.next_page_token|ListCertificatesResponse.next_page_token}.
   * @param {string} [request.filter]
   *   Optional. Only include resources that match the filter in the response.
   * @param {string} [request.orderBy]
   *   Optional. Specify how the results should be sorted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Certificate]{@link google.cloud.security.privateca.v1beta1.Certificate} on 'data' event.
   */
  listCertificatesStream(
    request?: protos.google.cloud.security.privateca.v1beta1.IListCertificatesRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listCertificates.createStream(
      this.innerApiCalls.listCertificates as gax.GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to {@link listCertificates}, but returns an iterable object.
   *
   * for-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the location associated with the
   *   {@link google.cloud.security.privateca.v1beta1.Certificate|Certificates}, in the format
   *   `projects/* /locations/* /certificateauthorities/*`.
   * @param {number} [request.pageSize]
   *   Optional. Limit on the number of
   *   {@link google.cloud.security.privateca.v1beta1.Certificate|Certificates} to include in the
   *   response. Further {@link google.cloud.security.privateca.v1beta1.Certificate|Certificates} can subsequently be obtained
   *   by including the
   *   {@link google.cloud.security.privateca.v1beta1.ListCertificatesResponse.next_page_token|ListCertificatesResponse.next_page_token} in a subsequent
   *   request. If unspecified, the server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. Pagination token, returned earlier via
   *   {@link google.cloud.security.privateca.v1beta1.ListCertificatesResponse.next_page_token|ListCertificatesResponse.next_page_token}.
   * @param {string} [request.filter]
   *   Optional. Only include resources that match the filter in the response.
   * @param {string} [request.orderBy]
   *   Optional. Specify how the results should be sorted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   */
  listCertificatesAsync(
    request?: protos.google.cloud.security.privateca.v1beta1.IListCertificatesRequest,
    options?: gax.CallOptions
  ): AsyncIterable<
    protos.google.cloud.security.privateca.v1beta1.ICertificate
  > {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listCertificates.asyncIterate(
      this.innerApiCalls['listCertificates'] as GaxCall,
      (request as unknown) as RequestType,
      callSettings
    ) as AsyncIterable<
      protos.google.cloud.security.privateca.v1beta1.ICertificate
    >;
  }
  listCertificateAuthorities(
    request: protos.google.cloud.security.privateca.v1beta1.IListCertificateAuthoritiesRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority[],
      protos.google.cloud.security.privateca.v1beta1.IListCertificateAuthoritiesRequest | null,
      protos.google.cloud.security.privateca.v1beta1.IListCertificateAuthoritiesResponse
    ]
  >;
  listCertificateAuthorities(
    request: protos.google.cloud.security.privateca.v1beta1.IListCertificateAuthoritiesRequest,
    options: gax.CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.security.privateca.v1beta1.IListCertificateAuthoritiesRequest,
      | protos.google.cloud.security.privateca.v1beta1.IListCertificateAuthoritiesResponse
      | null
      | undefined,
      protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority
    >
  ): void;
  listCertificateAuthorities(
    request: protos.google.cloud.security.privateca.v1beta1.IListCertificateAuthoritiesRequest,
    callback: PaginationCallback<
      protos.google.cloud.security.privateca.v1beta1.IListCertificateAuthoritiesRequest,
      | protos.google.cloud.security.privateca.v1beta1.IListCertificateAuthoritiesResponse
      | null
      | undefined,
      protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority
    >
  ): void;
  /**
   * Lists {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthorities}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the location associated with the
   *   {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthorities}, in the format
   *   `projects/* /locations/*`.
   * @param {number} [request.pageSize]
   *   Optional. Limit on the number of {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthorities} to
   *   include in the response.
   *   Further {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthorities} can subsequently be
   *   obtained by including the
   *   {@link google.cloud.security.privateca.v1beta1.ListCertificateAuthoritiesResponse.next_page_token|ListCertificateAuthoritiesResponse.next_page_token} in a subsequent
   *   request. If unspecified, the server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. Pagination token, returned earlier via
   *   {@link google.cloud.security.privateca.v1beta1.ListCertificateAuthoritiesResponse.next_page_token|ListCertificateAuthoritiesResponse.next_page_token}.
   * @param {string} [request.filter]
   *   Optional. Only include resources that match the filter in the response.
   * @param {string} [request.orderBy]
   *   Optional. Specify how the results should be sorted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [CertificateAuthority]{@link google.cloud.security.privateca.v1beta1.CertificateAuthority}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [CertificateAuthority]{@link google.cloud.security.privateca.v1beta1.CertificateAuthority} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListCertificateAuthoritiesRequest]{@link google.cloud.security.privateca.v1beta1.ListCertificateAuthoritiesRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListCertificateAuthoritiesResponse]{@link google.cloud.security.privateca.v1beta1.ListCertificateAuthoritiesResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listCertificateAuthorities(
    request: protos.google.cloud.security.privateca.v1beta1.IListCertificateAuthoritiesRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | PaginationCallback<
          protos.google.cloud.security.privateca.v1beta1.IListCertificateAuthoritiesRequest,
          | protos.google.cloud.security.privateca.v1beta1.IListCertificateAuthoritiesResponse
          | null
          | undefined,
          protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority
        >,
    callback?: PaginationCallback<
      protos.google.cloud.security.privateca.v1beta1.IListCertificateAuthoritiesRequest,
      | protos.google.cloud.security.privateca.v1beta1.IListCertificateAuthoritiesResponse
      | null
      | undefined,
      protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority
    >
  ): Promise<
    [
      protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority[],
      protos.google.cloud.security.privateca.v1beta1.IListCertificateAuthoritiesRequest | null,
      protos.google.cloud.security.privateca.v1beta1.IListCertificateAuthoritiesResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listCertificateAuthorities(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to {@link listCertificateAuthorities}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listCertificateAuthorities} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the location associated with the
   *   {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthorities}, in the format
   *   `projects/* /locations/*`.
   * @param {number} [request.pageSize]
   *   Optional. Limit on the number of {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthorities} to
   *   include in the response.
   *   Further {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthorities} can subsequently be
   *   obtained by including the
   *   {@link google.cloud.security.privateca.v1beta1.ListCertificateAuthoritiesResponse.next_page_token|ListCertificateAuthoritiesResponse.next_page_token} in a subsequent
   *   request. If unspecified, the server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. Pagination token, returned earlier via
   *   {@link google.cloud.security.privateca.v1beta1.ListCertificateAuthoritiesResponse.next_page_token|ListCertificateAuthoritiesResponse.next_page_token}.
   * @param {string} [request.filter]
   *   Optional. Only include resources that match the filter in the response.
   * @param {string} [request.orderBy]
   *   Optional. Specify how the results should be sorted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [CertificateAuthority]{@link google.cloud.security.privateca.v1beta1.CertificateAuthority} on 'data' event.
   */
  listCertificateAuthoritiesStream(
    request?: protos.google.cloud.security.privateca.v1beta1.IListCertificateAuthoritiesRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listCertificateAuthorities.createStream(
      this.innerApiCalls.listCertificateAuthorities as gax.GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to {@link listCertificateAuthorities}, but returns an iterable object.
   *
   * for-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the location associated with the
   *   {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthorities}, in the format
   *   `projects/* /locations/*`.
   * @param {number} [request.pageSize]
   *   Optional. Limit on the number of {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthorities} to
   *   include in the response.
   *   Further {@link google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthorities} can subsequently be
   *   obtained by including the
   *   {@link google.cloud.security.privateca.v1beta1.ListCertificateAuthoritiesResponse.next_page_token|ListCertificateAuthoritiesResponse.next_page_token} in a subsequent
   *   request. If unspecified, the server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. Pagination token, returned earlier via
   *   {@link google.cloud.security.privateca.v1beta1.ListCertificateAuthoritiesResponse.next_page_token|ListCertificateAuthoritiesResponse.next_page_token}.
   * @param {string} [request.filter]
   *   Optional. Only include resources that match the filter in the response.
   * @param {string} [request.orderBy]
   *   Optional. Specify how the results should be sorted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   */
  listCertificateAuthoritiesAsync(
    request?: protos.google.cloud.security.privateca.v1beta1.IListCertificateAuthoritiesRequest,
    options?: gax.CallOptions
  ): AsyncIterable<
    protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority
  > {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listCertificateAuthorities.asyncIterate(
      this.innerApiCalls['listCertificateAuthorities'] as GaxCall,
      (request as unknown) as RequestType,
      callSettings
    ) as AsyncIterable<
      protos.google.cloud.security.privateca.v1beta1.ICertificateAuthority
    >;
  }
  listCertificateRevocationLists(
    request: protos.google.cloud.security.privateca.v1beta1.IListCertificateRevocationListsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList[],
      protos.google.cloud.security.privateca.v1beta1.IListCertificateRevocationListsRequest | null,
      protos.google.cloud.security.privateca.v1beta1.IListCertificateRevocationListsResponse
    ]
  >;
  listCertificateRevocationLists(
    request: protos.google.cloud.security.privateca.v1beta1.IListCertificateRevocationListsRequest,
    options: gax.CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.security.privateca.v1beta1.IListCertificateRevocationListsRequest,
      | protos.google.cloud.security.privateca.v1beta1.IListCertificateRevocationListsResponse
      | null
      | undefined,
      protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList
    >
  ): void;
  listCertificateRevocationLists(
    request: protos.google.cloud.security.privateca.v1beta1.IListCertificateRevocationListsRequest,
    callback: PaginationCallback<
      protos.google.cloud.security.privateca.v1beta1.IListCertificateRevocationListsRequest,
      | protos.google.cloud.security.privateca.v1beta1.IListCertificateRevocationListsResponse
      | null
      | undefined,
      protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList
    >
  ): void;
  /**
   * Lists {@link google.cloud.security.privateca.v1beta1.CertificateRevocationList|CertificateRevocationLists}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the location associated with the
   *   {@link google.cloud.security.privateca.v1beta1.CertificateRevocationList|CertificateRevocationLists}, in the format
   *   `projects/* /locations/* /certificateauthorities/*`.
   * @param {number} [request.pageSize]
   *   Optional. Limit on the number of
   *   {@link google.cloud.security.privateca.v1beta1.CertificateRevocationList|CertificateRevocationLists} to include in the
   *   response. Further {@link google.cloud.security.privateca.v1beta1.CertificateRevocationList|CertificateRevocationLists}
   *   can subsequently be obtained by including the
   *   {@link google.cloud.security.privateca.v1beta1.ListCertificateRevocationListsResponse.next_page_token|ListCertificateRevocationListsResponse.next_page_token} in a subsequent
   *   request. If unspecified, the server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. Pagination token, returned earlier via
   *   {@link google.cloud.security.privateca.v1beta1.ListCertificateRevocationListsResponse.next_page_token|ListCertificateRevocationListsResponse.next_page_token}.
   * @param {string} [request.filter]
   *   Optional. Only include resources that match the filter in the response.
   * @param {string} [request.orderBy]
   *   Optional. Specify how the results should be sorted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [CertificateRevocationList]{@link google.cloud.security.privateca.v1beta1.CertificateRevocationList}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [CertificateRevocationList]{@link google.cloud.security.privateca.v1beta1.CertificateRevocationList} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListCertificateRevocationListsRequest]{@link google.cloud.security.privateca.v1beta1.ListCertificateRevocationListsRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListCertificateRevocationListsResponse]{@link google.cloud.security.privateca.v1beta1.ListCertificateRevocationListsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listCertificateRevocationLists(
    request: protos.google.cloud.security.privateca.v1beta1.IListCertificateRevocationListsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | PaginationCallback<
          protos.google.cloud.security.privateca.v1beta1.IListCertificateRevocationListsRequest,
          | protos.google.cloud.security.privateca.v1beta1.IListCertificateRevocationListsResponse
          | null
          | undefined,
          protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList
        >,
    callback?: PaginationCallback<
      protos.google.cloud.security.privateca.v1beta1.IListCertificateRevocationListsRequest,
      | protos.google.cloud.security.privateca.v1beta1.IListCertificateRevocationListsResponse
      | null
      | undefined,
      protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList
    >
  ): Promise<
    [
      protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList[],
      protos.google.cloud.security.privateca.v1beta1.IListCertificateRevocationListsRequest | null,
      protos.google.cloud.security.privateca.v1beta1.IListCertificateRevocationListsResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listCertificateRevocationLists(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to {@link listCertificateRevocationLists}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listCertificateRevocationLists} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the location associated with the
   *   {@link google.cloud.security.privateca.v1beta1.CertificateRevocationList|CertificateRevocationLists}, in the format
   *   `projects/* /locations/* /certificateauthorities/*`.
   * @param {number} [request.pageSize]
   *   Optional. Limit on the number of
   *   {@link google.cloud.security.privateca.v1beta1.CertificateRevocationList|CertificateRevocationLists} to include in the
   *   response. Further {@link google.cloud.security.privateca.v1beta1.CertificateRevocationList|CertificateRevocationLists}
   *   can subsequently be obtained by including the
   *   {@link google.cloud.security.privateca.v1beta1.ListCertificateRevocationListsResponse.next_page_token|ListCertificateRevocationListsResponse.next_page_token} in a subsequent
   *   request. If unspecified, the server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. Pagination token, returned earlier via
   *   {@link google.cloud.security.privateca.v1beta1.ListCertificateRevocationListsResponse.next_page_token|ListCertificateRevocationListsResponse.next_page_token}.
   * @param {string} [request.filter]
   *   Optional. Only include resources that match the filter in the response.
   * @param {string} [request.orderBy]
   *   Optional. Specify how the results should be sorted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [CertificateRevocationList]{@link google.cloud.security.privateca.v1beta1.CertificateRevocationList} on 'data' event.
   */
  listCertificateRevocationListsStream(
    request?: protos.google.cloud.security.privateca.v1beta1.IListCertificateRevocationListsRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listCertificateRevocationLists.createStream(
      this.innerApiCalls.listCertificateRevocationLists as gax.GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to {@link listCertificateRevocationLists}, but returns an iterable object.
   *
   * for-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the location associated with the
   *   {@link google.cloud.security.privateca.v1beta1.CertificateRevocationList|CertificateRevocationLists}, in the format
   *   `projects/* /locations/* /certificateauthorities/*`.
   * @param {number} [request.pageSize]
   *   Optional. Limit on the number of
   *   {@link google.cloud.security.privateca.v1beta1.CertificateRevocationList|CertificateRevocationLists} to include in the
   *   response. Further {@link google.cloud.security.privateca.v1beta1.CertificateRevocationList|CertificateRevocationLists}
   *   can subsequently be obtained by including the
   *   {@link google.cloud.security.privateca.v1beta1.ListCertificateRevocationListsResponse.next_page_token|ListCertificateRevocationListsResponse.next_page_token} in a subsequent
   *   request. If unspecified, the server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. Pagination token, returned earlier via
   *   {@link google.cloud.security.privateca.v1beta1.ListCertificateRevocationListsResponse.next_page_token|ListCertificateRevocationListsResponse.next_page_token}.
   * @param {string} [request.filter]
   *   Optional. Only include resources that match the filter in the response.
   * @param {string} [request.orderBy]
   *   Optional. Specify how the results should be sorted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   */
  listCertificateRevocationListsAsync(
    request?: protos.google.cloud.security.privateca.v1beta1.IListCertificateRevocationListsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<
    protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList
  > {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listCertificateRevocationLists.asyncIterate(
      this.innerApiCalls['listCertificateRevocationLists'] as GaxCall,
      (request as unknown) as RequestType,
      callSettings
    ) as AsyncIterable<
      protos.google.cloud.security.privateca.v1beta1.ICertificateRevocationList
    >;
  }
  listReusableConfigs(
    request: protos.google.cloud.security.privateca.v1beta1.IListReusableConfigsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.security.privateca.v1beta1.IReusableConfig[],
      protos.google.cloud.security.privateca.v1beta1.IListReusableConfigsRequest | null,
      protos.google.cloud.security.privateca.v1beta1.IListReusableConfigsResponse
    ]
  >;
  listReusableConfigs(
    request: protos.google.cloud.security.privateca.v1beta1.IListReusableConfigsRequest,
    options: gax.CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.security.privateca.v1beta1.IListReusableConfigsRequest,
      | protos.google.cloud.security.privateca.v1beta1.IListReusableConfigsResponse
      | null
      | undefined,
      protos.google.cloud.security.privateca.v1beta1.IReusableConfig
    >
  ): void;
  listReusableConfigs(
    request: protos.google.cloud.security.privateca.v1beta1.IListReusableConfigsRequest,
    callback: PaginationCallback<
      protos.google.cloud.security.privateca.v1beta1.IListReusableConfigsRequest,
      | protos.google.cloud.security.privateca.v1beta1.IListReusableConfigsResponse
      | null
      | undefined,
      protos.google.cloud.security.privateca.v1beta1.IReusableConfig
    >
  ): void;
  /**
   * Lists {@link google.cloud.security.privateca.v1beta1.ReusableConfig|ReusableConfigs}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the location associated with the
   *   {@link google.cloud.security.privateca.v1beta1.ReusableConfig|ReusableConfigs}, in the format
   *   `projects/* /locations/*`.
   * @param {number} [request.pageSize]
   *   Optional. Limit on the number of
   *   {@link google.cloud.security.privateca.v1beta1.ReusableConfig|ReusableConfigs} to include in the response.
   *   Further {@link google.cloud.security.privateca.v1beta1.ReusableConfig|ReusableConfigs} can subsequently be
   *   obtained by including the
   *   {@link google.cloud.security.privateca.v1beta1.ListReusableConfigsResponse.next_page_token|ListReusableConfigsResponse.next_page_token} in a subsequent request. If
   *   unspecified, the server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. Pagination token, returned earlier via
   *   {@link google.cloud.security.privateca.v1beta1.ListReusableConfigsResponse.next_page_token|ListReusableConfigsResponse.next_page_token}.
   * @param {string} [request.filter]
   *   Optional. Only include resources that match the filter in the response.
   * @param {string} [request.orderBy]
   *   Optional. Specify how the results should be sorted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [ReusableConfig]{@link google.cloud.security.privateca.v1beta1.ReusableConfig}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [ReusableConfig]{@link google.cloud.security.privateca.v1beta1.ReusableConfig} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListReusableConfigsRequest]{@link google.cloud.security.privateca.v1beta1.ListReusableConfigsRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListReusableConfigsResponse]{@link google.cloud.security.privateca.v1beta1.ListReusableConfigsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listReusableConfigs(
    request: protos.google.cloud.security.privateca.v1beta1.IListReusableConfigsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | PaginationCallback<
          protos.google.cloud.security.privateca.v1beta1.IListReusableConfigsRequest,
          | protos.google.cloud.security.privateca.v1beta1.IListReusableConfigsResponse
          | null
          | undefined,
          protos.google.cloud.security.privateca.v1beta1.IReusableConfig
        >,
    callback?: PaginationCallback<
      protos.google.cloud.security.privateca.v1beta1.IListReusableConfigsRequest,
      | protos.google.cloud.security.privateca.v1beta1.IListReusableConfigsResponse
      | null
      | undefined,
      protos.google.cloud.security.privateca.v1beta1.IReusableConfig
    >
  ): Promise<
    [
      protos.google.cloud.security.privateca.v1beta1.IReusableConfig[],
      protos.google.cloud.security.privateca.v1beta1.IListReusableConfigsRequest | null,
      protos.google.cloud.security.privateca.v1beta1.IListReusableConfigsResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listReusableConfigs(request, options, callback);
  }

  /**
   * Equivalent to {@link listReusableConfigs}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listReusableConfigs} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the location associated with the
   *   {@link google.cloud.security.privateca.v1beta1.ReusableConfig|ReusableConfigs}, in the format
   *   `projects/* /locations/*`.
   * @param {number} [request.pageSize]
   *   Optional. Limit on the number of
   *   {@link google.cloud.security.privateca.v1beta1.ReusableConfig|ReusableConfigs} to include in the response.
   *   Further {@link google.cloud.security.privateca.v1beta1.ReusableConfig|ReusableConfigs} can subsequently be
   *   obtained by including the
   *   {@link google.cloud.security.privateca.v1beta1.ListReusableConfigsResponse.next_page_token|ListReusableConfigsResponse.next_page_token} in a subsequent request. If
   *   unspecified, the server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. Pagination token, returned earlier via
   *   {@link google.cloud.security.privateca.v1beta1.ListReusableConfigsResponse.next_page_token|ListReusableConfigsResponse.next_page_token}.
   * @param {string} [request.filter]
   *   Optional. Only include resources that match the filter in the response.
   * @param {string} [request.orderBy]
   *   Optional. Specify how the results should be sorted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [ReusableConfig]{@link google.cloud.security.privateca.v1beta1.ReusableConfig} on 'data' event.
   */
  listReusableConfigsStream(
    request?: protos.google.cloud.security.privateca.v1beta1.IListReusableConfigsRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listReusableConfigs.createStream(
      this.innerApiCalls.listReusableConfigs as gax.GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to {@link listReusableConfigs}, but returns an iterable object.
   *
   * for-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the location associated with the
   *   {@link google.cloud.security.privateca.v1beta1.ReusableConfig|ReusableConfigs}, in the format
   *   `projects/* /locations/*`.
   * @param {number} [request.pageSize]
   *   Optional. Limit on the number of
   *   {@link google.cloud.security.privateca.v1beta1.ReusableConfig|ReusableConfigs} to include in the response.
   *   Further {@link google.cloud.security.privateca.v1beta1.ReusableConfig|ReusableConfigs} can subsequently be
   *   obtained by including the
   *   {@link google.cloud.security.privateca.v1beta1.ListReusableConfigsResponse.next_page_token|ListReusableConfigsResponse.next_page_token} in a subsequent request. If
   *   unspecified, the server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. Pagination token, returned earlier via
   *   {@link google.cloud.security.privateca.v1beta1.ListReusableConfigsResponse.next_page_token|ListReusableConfigsResponse.next_page_token}.
   * @param {string} [request.filter]
   *   Optional. Only include resources that match the filter in the response.
   * @param {string} [request.orderBy]
   *   Optional. Specify how the results should be sorted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   */
  listReusableConfigsAsync(
    request?: protos.google.cloud.security.privateca.v1beta1.IListReusableConfigsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<
    protos.google.cloud.security.privateca.v1beta1.IReusableConfig
  > {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listReusableConfigs.asyncIterate(
      this.innerApiCalls['listReusableConfigs'] as GaxCall,
      (request as unknown) as RequestType,
      callSettings
    ) as AsyncIterable<
      protos.google.cloud.security.privateca.v1beta1.IReusableConfig
    >;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified certificate resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} certificate_authority
   * @param {string} certificate
   * @returns {string} Resource name string.
   */
  certificatePath(
    project: string,
    location: string,
    certificateAuthority: string,
    certificate: string
  ) {
    return this.pathTemplates.certificatePathTemplate.render({
      project: project,
      location: location,
      certificate_authority: certificateAuthority,
      certificate: certificate,
    });
  }

  /**
   * Parse the project from Certificate resource.
   *
   * @param {string} certificateName
   *   A fully-qualified path representing Certificate resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCertificateName(certificateName: string) {
    return this.pathTemplates.certificatePathTemplate.match(certificateName)
      .project;
  }

  /**
   * Parse the location from Certificate resource.
   *
   * @param {string} certificateName
   *   A fully-qualified path representing Certificate resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCertificateName(certificateName: string) {
    return this.pathTemplates.certificatePathTemplate.match(certificateName)
      .location;
  }

  /**
   * Parse the certificate_authority from Certificate resource.
   *
   * @param {string} certificateName
   *   A fully-qualified path representing Certificate resource.
   * @returns {string} A string representing the certificate_authority.
   */
  matchCertificateAuthorityFromCertificateName(certificateName: string) {
    return this.pathTemplates.certificatePathTemplate.match(certificateName)
      .certificate_authority;
  }

  /**
   * Parse the certificate from Certificate resource.
   *
   * @param {string} certificateName
   *   A fully-qualified path representing Certificate resource.
   * @returns {string} A string representing the certificate.
   */
  matchCertificateFromCertificateName(certificateName: string) {
    return this.pathTemplates.certificatePathTemplate.match(certificateName)
      .certificate;
  }

  /**
   * Return a fully-qualified certificateAuthority resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} certificate_authority
   * @returns {string} Resource name string.
   */
  certificateAuthorityPath(
    project: string,
    location: string,
    certificateAuthority: string
  ) {
    return this.pathTemplates.certificateAuthorityPathTemplate.render({
      project: project,
      location: location,
      certificate_authority: certificateAuthority,
    });
  }

  /**
   * Parse the project from CertificateAuthority resource.
   *
   * @param {string} certificateAuthorityName
   *   A fully-qualified path representing CertificateAuthority resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCertificateAuthorityName(certificateAuthorityName: string) {
    return this.pathTemplates.certificateAuthorityPathTemplate.match(
      certificateAuthorityName
    ).project;
  }

  /**
   * Parse the location from CertificateAuthority resource.
   *
   * @param {string} certificateAuthorityName
   *   A fully-qualified path representing CertificateAuthority resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCertificateAuthorityName(certificateAuthorityName: string) {
    return this.pathTemplates.certificateAuthorityPathTemplate.match(
      certificateAuthorityName
    ).location;
  }

  /**
   * Parse the certificate_authority from CertificateAuthority resource.
   *
   * @param {string} certificateAuthorityName
   *   A fully-qualified path representing CertificateAuthority resource.
   * @returns {string} A string representing the certificate_authority.
   */
  matchCertificateAuthorityFromCertificateAuthorityName(
    certificateAuthorityName: string
  ) {
    return this.pathTemplates.certificateAuthorityPathTemplate.match(
      certificateAuthorityName
    ).certificate_authority;
  }

  /**
   * Return a fully-qualified certificateRevocationList resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} certificate_authority
   * @param {string} certificate_revocation_list
   * @returns {string} Resource name string.
   */
  certificateRevocationListPath(
    project: string,
    location: string,
    certificateAuthority: string,
    certificateRevocationList: string
  ) {
    return this.pathTemplates.certificateRevocationListPathTemplate.render({
      project: project,
      location: location,
      certificate_authority: certificateAuthority,
      certificate_revocation_list: certificateRevocationList,
    });
  }

  /**
   * Parse the project from CertificateRevocationList resource.
   *
   * @param {string} certificateRevocationListName
   *   A fully-qualified path representing CertificateRevocationList resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCertificateRevocationListName(
    certificateRevocationListName: string
  ) {
    return this.pathTemplates.certificateRevocationListPathTemplate.match(
      certificateRevocationListName
    ).project;
  }

  /**
   * Parse the location from CertificateRevocationList resource.
   *
   * @param {string} certificateRevocationListName
   *   A fully-qualified path representing CertificateRevocationList resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCertificateRevocationListName(
    certificateRevocationListName: string
  ) {
    return this.pathTemplates.certificateRevocationListPathTemplate.match(
      certificateRevocationListName
    ).location;
  }

  /**
   * Parse the certificate_authority from CertificateRevocationList resource.
   *
   * @param {string} certificateRevocationListName
   *   A fully-qualified path representing CertificateRevocationList resource.
   * @returns {string} A string representing the certificate_authority.
   */
  matchCertificateAuthorityFromCertificateRevocationListName(
    certificateRevocationListName: string
  ) {
    return this.pathTemplates.certificateRevocationListPathTemplate.match(
      certificateRevocationListName
    ).certificate_authority;
  }

  /**
   * Parse the certificate_revocation_list from CertificateRevocationList resource.
   *
   * @param {string} certificateRevocationListName
   *   A fully-qualified path representing CertificateRevocationList resource.
   * @returns {string} A string representing the certificate_revocation_list.
   */
  matchCertificateRevocationListFromCertificateRevocationListName(
    certificateRevocationListName: string
  ) {
    return this.pathTemplates.certificateRevocationListPathTemplate.match(
      certificateRevocationListName
    ).certificate_revocation_list;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified reusableConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} reusable_config
   * @returns {string} Resource name string.
   */
  reusableConfigPath(
    project: string,
    location: string,
    reusableConfig: string
  ) {
    return this.pathTemplates.reusableConfigPathTemplate.render({
      project: project,
      location: location,
      reusable_config: reusableConfig,
    });
  }

  /**
   * Parse the project from ReusableConfig resource.
   *
   * @param {string} reusableConfigName
   *   A fully-qualified path representing ReusableConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromReusableConfigName(reusableConfigName: string) {
    return this.pathTemplates.reusableConfigPathTemplate.match(
      reusableConfigName
    ).project;
  }

  /**
   * Parse the location from ReusableConfig resource.
   *
   * @param {string} reusableConfigName
   *   A fully-qualified path representing ReusableConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromReusableConfigName(reusableConfigName: string) {
    return this.pathTemplates.reusableConfigPathTemplate.match(
      reusableConfigName
    ).location;
  }

  /**
   * Parse the reusable_config from ReusableConfig resource.
   *
   * @param {string} reusableConfigName
   *   A fully-qualified path representing ReusableConfig resource.
   * @returns {string} A string representing the reusable_config.
   */
  matchReusableConfigFromReusableConfigName(reusableConfigName: string) {
    return this.pathTemplates.reusableConfigPathTemplate.match(
      reusableConfigName
    ).reusable_config;
  }

  /**
   * Terminate the GRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.certificateAuthorityServiceStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
